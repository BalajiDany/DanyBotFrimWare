
DanyBotFrimWare.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000ffe  00001092  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ffe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  0080011a  0080011a  000010ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  0000111c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019d7  00000000  00000000  00001324  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ddf  00000000  00000000  00002cfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001372  00000000  00000000  00003ada  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000530  00000000  00000000  00004e4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d52  00000000  00000000  0000537c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001379  00000000  00000000  000060ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  00007447  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 96 00 	jmp	0x12c	; 0x12c <__ctors_end>
   4:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
   8:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
   c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  10:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  14:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  18:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  1c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  20:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  24:	0c 94 2c 07 	jmp	0xe58	; 0xe58 <__vector_9>
  28:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  2c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  30:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  34:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  38:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  3c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  40:	0c 94 c4 01 	jmp	0x388	; 0x388 <__vector_16>
  44:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  48:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  4c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  50:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  54:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  58:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  5c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  60:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  64:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  68:	7f 05       	cpc	r23, r15
  6a:	79 05       	cpc	r23, r9
  6c:	82 05       	cpc	r24, r2
  6e:	85 05       	cpc	r24, r5
  70:	88 05       	cpc	r24, r8
  72:	8b 05       	cpc	r24, r11
  74:	8e 05       	cpc	r24, r14
  76:	91 05       	cpc	r25, r1
  78:	94 05       	cpc	r25, r4
  7a:	97 05       	cpc	r25, r7
  7c:	9a 05       	cpc	r25, r10
  7e:	9d 05       	cpc	r25, r13
  80:	95 06       	cpc	r9, r21
  82:	ad 06       	cpc	r10, r29
  84:	ad 06       	cpc	r10, r29
  86:	ad 06       	cpc	r10, r29
  88:	ad 06       	cpc	r10, r29
  8a:	ad 06       	cpc	r10, r29
  8c:	ad 06       	cpc	r10, r29
  8e:	ad 06       	cpc	r10, r29
  90:	ad 06       	cpc	r10, r29
  92:	ad 06       	cpc	r10, r29
  94:	ad 06       	cpc	r10, r29
  96:	ad 06       	cpc	r10, r29
  98:	ad 06       	cpc	r10, r29
  9a:	ad 06       	cpc	r10, r29
  9c:	ad 06       	cpc	r10, r29
  9e:	ad 06       	cpc	r10, r29
  a0:	ad 06       	cpc	r10, r29
  a2:	ad 06       	cpc	r10, r29
  a4:	ad 06       	cpc	r10, r29
  a6:	ad 06       	cpc	r10, r29
  a8:	ad 06       	cpc	r10, r29
  aa:	ad 06       	cpc	r10, r29
  ac:	ad 06       	cpc	r10, r29
  ae:	ad 06       	cpc	r10, r29
  b0:	ad 06       	cpc	r10, r29
  b2:	ad 06       	cpc	r10, r29
  b4:	ad 06       	cpc	r10, r29
  b6:	30 06       	cpc	r3, r16
  b8:	ad 06       	cpc	r10, r29
  ba:	2e 06       	cpc	r2, r30
  bc:	ad 06       	cpc	r10, r29
  be:	ad 06       	cpc	r10, r29
  c0:	ad 06       	cpc	r10, r29
  c2:	ad 06       	cpc	r10, r29
  c4:	ad 06       	cpc	r10, r29
  c6:	ad 06       	cpc	r10, r29
  c8:	ad 06       	cpc	r10, r29
  ca:	ad 06       	cpc	r10, r29
  cc:	ad 06       	cpc	r10, r29
  ce:	ad 06       	cpc	r10, r29
  d0:	ad 06       	cpc	r10, r29
  d2:	ad 06       	cpc	r10, r29
  d4:	ad 06       	cpc	r10, r29
  d6:	ad 06       	cpc	r10, r29
  d8:	ad 06       	cpc	r10, r29
  da:	ad 06       	cpc	r10, r29
  dc:	ad 06       	cpc	r10, r29
  de:	ad 06       	cpc	r10, r29
  e0:	ad 06       	cpc	r10, r29
  e2:	ad 06       	cpc	r10, r29
  e4:	ad 06       	cpc	r10, r29
  e6:	ad 06       	cpc	r10, r29
  e8:	ad 06       	cpc	r10, r29
  ea:	ad 06       	cpc	r10, r29
  ec:	ad 06       	cpc	r10, r29
  ee:	ad 06       	cpc	r10, r29
  f0:	ad 06       	cpc	r10, r29
  f2:	ad 06       	cpc	r10, r29
  f4:	ad 06       	cpc	r10, r29
  f6:	ad 06       	cpc	r10, r29
  f8:	ad 06       	cpc	r10, r29
  fa:	ad 06       	cpc	r10, r29
  fc:	ad 06       	cpc	r10, r29
  fe:	ad 06       	cpc	r10, r29
 100:	b2 06       	cpc	r11, r18
 102:	2b 06       	cpc	r2, r27
 104:	b5 06       	cpc	r11, r21
 106:	32 06       	cpc	r3, r18
 108:	35 06       	cpc	r3, r21
 10a:	38 06       	cpc	r3, r24
 10c:	3b 06       	cpc	r3, r27
 10e:	ad 06       	cpc	r10, r29
 110:	ad 06       	cpc	r10, r29
 112:	ad 06       	cpc	r10, r29
 114:	ad 06       	cpc	r10, r29
 116:	3e 06       	cpc	r3, r30
 118:	50 06       	cpc	r5, r16
 11a:	ad 06       	cpc	r10, r29
 11c:	65 06       	cpc	r6, r21
 11e:	ad 06       	cpc	r10, r29
 120:	ad 06       	cpc	r10, r29
 122:	6b 06       	cpc	r6, r27
 124:	ad 06       	cpc	r10, r29
 126:	6e 06       	cpc	r6, r30
 128:	ad 06       	cpc	r10, r29
 12a:	8e 06       	cpc	r8, r30

0000012c <__ctors_end>:
 12c:	11 24       	eor	r1, r1
 12e:	1f be       	out	0x3f, r1	; 63
 130:	cf ef       	ldi	r28, 0xFF	; 255
 132:	d8 e0       	ldi	r29, 0x08	; 8
 134:	de bf       	out	0x3e, r29	; 62
 136:	cd bf       	out	0x3d, r28	; 61

00000138 <__do_copy_data>:
 138:	11 e0       	ldi	r17, 0x01	; 1
 13a:	a0 e0       	ldi	r26, 0x00	; 0
 13c:	b1 e0       	ldi	r27, 0x01	; 1
 13e:	ee ef       	ldi	r30, 0xFE	; 254
 140:	ff e0       	ldi	r31, 0x0F	; 15
 142:	02 c0       	rjmp	.+4      	; 0x148 <__do_copy_data+0x10>
 144:	05 90       	lpm	r0, Z+
 146:	0d 92       	st	X+, r0
 148:	aa 31       	cpi	r26, 0x1A	; 26
 14a:	b1 07       	cpc	r27, r17
 14c:	d9 f7       	brne	.-10     	; 0x144 <__do_copy_data+0xc>

0000014e <__do_clear_bss>:
 14e:	21 e0       	ldi	r18, 0x01	; 1
 150:	aa e1       	ldi	r26, 0x1A	; 26
 152:	b1 e0       	ldi	r27, 0x01	; 1
 154:	01 c0       	rjmp	.+2      	; 0x158 <.do_clear_bss_start>

00000156 <.do_clear_bss_loop>:
 156:	1d 92       	st	X+, r1

00000158 <.do_clear_bss_start>:
 158:	a2 33       	cpi	r26, 0x32	; 50
 15a:	b2 07       	cpc	r27, r18
 15c:	e1 f7       	brne	.-8      	; 0x156 <.do_clear_bss_loop>
 15e:	0e 94 c2 00 	call	0x184	; 0x184 <main>
 162:	0c 94 fd 07 	jmp	0xffa	; 0xffa <_exit>

00000166 <__bad_interrupt>:
 166:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000016a <_Z5setUpv>:
		DanyBotBuzzer::playNote(NOTE_E(5),112, 15);
    }
}

void setUp(){
	DanyBotTimer::setUp();
 16a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_ZN12DanyBotTimer5setUpEv>
	DanyBotLed::setUp();
 16e:	0e 94 ed 00 	call	0x1da	; 0x1da <_ZN10DanyBotLed5setUpEv>
	DanyBotPushButton::setUp();
 172:	0e 94 30 01 	call	0x260	; 0x260 <_ZN17DanyBotPushButton5setUpEv>
	DanyBotMotors::setUp();
 176:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_ZN13DanyBotMotors5setUpEv>
	DanyBotLineSensor::setUp();
 17a:	0e 94 39 02 	call	0x472	; 0x472 <_ZN17DanyBotLineSensor5setUpEv>
	DanyBotBuzzer::setUp();
 17e:	0e 94 35 04 	call	0x86a	; 0x86a <_ZN13DanyBotBuzzer5setUpEv>
 182:	08 95       	ret

00000184 <main>:
#include <DanyBotBuzzer/DanyBotBuzzer.h>

void setUp();

int main(void)
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	cd b7       	in	r28, 0x3d	; 61
 18a:	de b7       	in	r29, 0x3e	; 62
 18c:	2c 97       	sbiw	r28, 0x0c	; 12
 18e:	0f b6       	in	r0, 0x3f	; 63
 190:	f8 94       	cli
 192:	de bf       	out	0x3e, r29	; 62
 194:	0f be       	out	0x3f, r0	; 63
 196:	cd bf       	out	0x3d, r28	; 61
	uint16_t sensor[NO_SENSOR];
	setUp();
 198:	0e 94 b5 00 	call	0x16a	; 0x16a <_Z5setUpv>
    while (1) {
	    DanyBotLed::toggle();
 19c:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN10DanyBotLed6toggleEv>
		DanyBotPushButton::waitForSingleClick();
 1a0:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <_ZN17DanyBotPushButton18waitForSingleClickEv>
		DanyBotMotors::setSpeed(20, 20);
 1a4:	64 e1       	ldi	r22, 0x14	; 20
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	84 e1       	ldi	r24, 0x14	; 20
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN13DanyBotMotors8setSpeedEjj>
		DanyBotTimer::start();
 1b0:	0e 94 a6 01 	call	0x34c	; 0x34c <_ZN12DanyBotTimer5startEv>
		DanyBotTimer::millis();
 1b4:	0e 94 73 01 	call	0x2e6	; 0x2e6 <_ZN12DanyBotTimer6millisEv>
		DanyBotTimer::micros();
 1b8:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_ZN12DanyBotTimer6microsEv>
		DanyBotTimer::stop();
 1bc:	0e 94 be 01 	call	0x37c	; 0x37c <_ZN12DanyBotTimer4stopEv>
		DanyBotLineSensor::calibrate();
 1c0:	0e 94 ad 02 	call	0x55a	; 0x55a <_ZN17DanyBotLineSensor9calibrateEv>
		DanyBotLineSensor::readLine(sensor);
 1c4:	ce 01       	movw	r24, r28
 1c6:	01 96       	adiw	r24, 0x01	; 1
 1c8:	0e 94 75 03 	call	0x6ea	; 0x6ea <_ZN17DanyBotLineSensor8readLineEPj>
		DanyBotBuzzer::playNote(NOTE_E(5),112, 15);
 1cc:	4f e0       	ldi	r20, 0x0F	; 15
 1ce:	60 e7       	ldi	r22, 0x70	; 112
 1d0:	70 e0       	ldi	r23, 0x00	; 0
 1d2:	80 e4       	ldi	r24, 0x40	; 64
 1d4:	0e 94 4f 05 	call	0xa9e	; 0xa9e <_ZN13DanyBotBuzzer8playNoteEhjh>
 1d8:	e1 cf       	rjmp	.-62     	; 0x19c <main+0x18>

000001da <_ZN10DanyBotLed5setUpEv>:
void DanyBotLed::on(){
	PORTB |= (1 << PORTB5);
}

void DanyBotLed::off(){
	PORTB &= ~(1 << PORTB5);
 1da:	25 9a       	sbi	0x04, 5	; 4
 1dc:	08 95       	ret

000001de <_ZN10DanyBotLed6toggleEv>:
}

void DanyBotLed::toggle(){
	PORTB ^= (1 << PORTB5);
 1de:	95 b1       	in	r25, 0x05	; 5
 1e0:	80 e2       	ldi	r24, 0x20	; 32
 1e2:	89 27       	eor	r24, r25
 1e4:	85 b9       	out	0x05, r24	; 5
 1e6:	08 95       	ret

000001e8 <_ZN13DanyBotMotors5setUpEv>:
#include "../Constant.h"
#include "DanyBotMotors.h"

void DanyBotMotors::setUp() {
	DDRD |= (1 << PORTD7);
 1e8:	57 9a       	sbi	0x0a, 7	; 10
	DDRB |= (1 << PORTB0);
 1ea:	20 9a       	sbi	0x04, 0	; 4
	
	TCCR1A = (1 << COM0A1) | (1 << COM0B1);
 1ec:	80 ea       	ldi	r24, 0xA0	; 160
 1ee:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = (1 << WGM13) | (1 << CS10);
 1f2:	81 e1       	ldi	r24, 0x11	; 17
 1f4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	ICR1 = MAX_MOTOR_SPEED;
 1f8:	80 e9       	ldi	r24, 0x90	; 144
 1fa:	91 e0       	ldi	r25, 0x01	; 1
 1fc:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 200:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 204:	08 95       	ret

00000206 <_ZN13DanyBotMotors13setRightSpeedEj>:
	bool reverse = speed < 0;
	if(reverse) {
		speed = -speed;
		PORTD &= ~(1 << PORTD7);
	} else {
		PORTD |= (1 << PORTD7);
 206:	5f 9a       	sbi	0x0b, 7	; 11
	}
	if(speed > MAX_MOTOR_SPEED) {
 208:	81 39       	cpi	r24, 0x91	; 145
 20a:	21 e0       	ldi	r18, 0x01	; 1
 20c:	92 07       	cpc	r25, r18
 20e:	38 f0       	brcs	.+14     	; 0x21e <_ZN13DanyBotMotors13setRightSpeedEj+0x18>
		OCR1A = MAX_MOTOR_SPEED;
 210:	80 e9       	ldi	r24, 0x90	; 144
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 218:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 21c:	08 95       	ret
	} else {
		OCR1A = speed;	
 21e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 222:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 226:	08 95       	ret

00000228 <_ZN13DanyBotMotors12setLeftSpeedEj>:
	bool reverse = speed < 0;
	if(reverse) {
		speed = -speed;
		PORTB &= ~(1 << PORTB0);
	} else {
		PORTB |= (1 << PORTB0);
 228:	28 9a       	sbi	0x05, 0	; 5
	}
	if(speed > MAX_MOTOR_SPEED){
 22a:	81 39       	cpi	r24, 0x91	; 145
 22c:	21 e0       	ldi	r18, 0x01	; 1
 22e:	92 07       	cpc	r25, r18
 230:	38 f0       	brcs	.+14     	; 0x240 <_ZN13DanyBotMotors12setLeftSpeedEj+0x18>
		OCR1B = MAX_MOTOR_SPEED;
 232:	80 e9       	ldi	r24, 0x90	; 144
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 23a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 23e:	08 95       	ret
	} else {
		OCR1B = speed;
 240:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 244:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 248:	08 95       	ret

0000024a <_ZN13DanyBotMotors8setSpeedEjj>:
	}
}

void DanyBotMotors::setSpeed(uint16_t lSpeed, uint16_t rSpeed) {
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
 24e:	eb 01       	movw	r28, r22
	DanyBotMotors::setLeftSpeed(lSpeed);
 250:	0e 94 14 01 	call	0x228	; 0x228 <_ZN13DanyBotMotors12setLeftSpeedEj>
	DanyBotMotors::setRightSpeed(rSpeed);
 254:	ce 01       	movw	r24, r28
 256:	0e 94 03 01 	call	0x206	; 0x206 <_ZN13DanyBotMotors13setRightSpeedEj>
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	08 95       	ret

00000260 <_ZN17DanyBotPushButton5setUpEv>:
#include "../Constant.h"
#include "DanyBotPushButton.h"

void DanyBotPushButton::setUp() {
	DDRB &= ~(1 << PORTB4);
 260:	24 98       	cbi	0x04, 4	; 4
	PORTB |= (1 << PORTB4);
 262:	2c 9a       	sbi	0x05, 4	; 5
 264:	08 95       	ret

00000266 <_ZN17DanyBotPushButton9isPressedEv>:
}

bool DanyBotPushButton::isPressed() {
	return PINB & (1 << PORTB4);
 266:	83 b1       	in	r24, 0x03	; 3
}
 268:	82 95       	swap	r24
 26a:	81 70       	andi	r24, 0x01	; 1
 26c:	08 95       	ret

0000026e <_ZN17DanyBotPushButton10isReleasedEv>:

bool DanyBotPushButton::isReleased() {
	return !DanyBotPushButton::isPressed();
 26e:	0e 94 33 01 	call	0x266	; 0x266 <_ZN17DanyBotPushButton9isPressedEv>
}
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	89 27       	eor	r24, r25
 276:	08 95       	ret

00000278 <_ZN17DanyBotPushButton12waitForPressEv>:

void DanyBotPushButton::waitForPress() {
	do {
		while(DanyBotPushButton::isPressed())
 278:	0e 94 33 01 	call	0x266	; 0x266 <_ZN17DanyBotPushButton9isPressedEv>
 27c:	88 23       	and	r24, r24
 27e:	39 f0       	breq	.+14     	; 0x28e <_ZN17DanyBotPushButton12waitForPressEv+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 280:	8f e3       	ldi	r24, 0x3F	; 63
 282:	9c e9       	ldi	r25, 0x9C	; 156
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <_ZN17DanyBotPushButton12waitForPressEv+0xc>
 288:	00 c0       	rjmp	.+0      	; 0x28a <_ZN17DanyBotPushButton12waitForPressEv+0x12>
 28a:	00 00       	nop
 28c:	f5 cf       	rjmp	.-22     	; 0x278 <_ZN17DanyBotPushButton12waitForPressEv>
bool DanyBotPushButton::isReleased() {
	return !DanyBotPushButton::isPressed();
}

void DanyBotPushButton::waitForPress() {
	do {
 28e:	0e 94 33 01 	call	0x266	; 0x266 <_ZN17DanyBotPushButton9isPressedEv>
 292:	81 11       	cpse	r24, r1
 294:	f1 cf       	rjmp	.-30     	; 0x278 <_ZN17DanyBotPushButton12waitForPressEv>
		while(DanyBotPushButton::isPressed())
			_delay_ms(DEBOUNCE_DELAY);
	} while(DanyBotPushButton::isPressed());
}
 296:	08 95       	ret

00000298 <_ZN17DanyBotPushButton14waitForReleaseEv>:

void DanyBotPushButton::waitForRelease() {
	do {
		while(DanyBotPushButton::isReleased())
 298:	0e 94 37 01 	call	0x26e	; 0x26e <_ZN17DanyBotPushButton10isReleasedEv>
 29c:	88 23       	and	r24, r24
 29e:	39 f0       	breq	.+14     	; 0x2ae <_ZN17DanyBotPushButton14waitForReleaseEv+0x16>
 2a0:	8f e3       	ldi	r24, 0x3F	; 63
 2a2:	9c e9       	ldi	r25, 0x9C	; 156
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <_ZN17DanyBotPushButton14waitForReleaseEv+0xc>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <_ZN17DanyBotPushButton14waitForReleaseEv+0x12>
 2aa:	00 00       	nop
 2ac:	f5 cf       	rjmp	.-22     	; 0x298 <_ZN17DanyBotPushButton14waitForReleaseEv>
			_delay_ms(DEBOUNCE_DELAY);
	} while(DanyBotPushButton::isPressed());
}

void DanyBotPushButton::waitForRelease() {
	do {
 2ae:	0e 94 37 01 	call	0x26e	; 0x26e <_ZN17DanyBotPushButton10isReleasedEv>
 2b2:	81 11       	cpse	r24, r1
 2b4:	f1 cf       	rjmp	.-30     	; 0x298 <_ZN17DanyBotPushButton14waitForReleaseEv>
		while(DanyBotPushButton::isReleased())
			_delay_ms(DEBOUNCE_DELAY);
	} while(DanyBotPushButton::isReleased());
}
 2b6:	08 95       	ret

000002b8 <_ZN17DanyBotPushButton18waitForSingleClickEv>:

void DanyBotPushButton::waitForSingleClick() {
	DanyBotPushButton::waitForPress();
 2b8:	0e 94 3c 01 	call	0x278	; 0x278 <_ZN17DanyBotPushButton12waitForPressEv>
	DanyBotPushButton::waitForRelease();
 2bc:	0e 94 4c 01 	call	0x298	; 0x298 <_ZN17DanyBotPushButton14waitForReleaseEv>
 2c0:	08 95       	ret

000002c2 <_ZN12DanyBotTimer5setUpEv>:
volatile uint32_t timer0_overflow_count = 0;
volatile uint32_t timer0_millis = 0;
static uint8_t timer0_fract = 0;

void DanyBotTimer::setUp() {
	sei();
 2c2:	78 94       	sei
	
	TCCR0A |= (1 << WGM01) | (1 << WGM00);
 2c4:	84 b5       	in	r24, 0x24	; 36
 2c6:	83 60       	ori	r24, 0x03	; 3
 2c8:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS01) | (1 << CS00);
 2ca:	85 b5       	in	r24, 0x25	; 37
 2cc:	83 60       	ori	r24, 0x03	; 3
 2ce:	85 bd       	out	0x25, r24	; 37
	
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 2d0:	ea e7       	ldi	r30, 0x7A	; 122
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 81       	ld	r24, Z
 2d6:	87 60       	ori	r24, 0x07	; 7
 2d8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);
 2da:	80 81       	ld	r24, Z
 2dc:	80 68       	ori	r24, 0x80	; 128
 2de:	80 83       	st	Z, r24
	UCSR0B = 0;
 2e0:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 2e4:	08 95       	ret

000002e6 <_ZN12DanyBotTimer6millisEv>:
}

uint32_t DanyBotTimer::millis() {
	uint32_t m;
	uint8_t oldSREG = SERG;
 2e6:	2f b7       	in	r18, 0x3f	; 63

	cli();
 2e8:	f8 94       	cli
	m = timer0_millis;
 2ea:	60 91 1b 01 	lds	r22, 0x011B	; 0x80011b <timer0_millis>
 2ee:	70 91 1c 01 	lds	r23, 0x011C	; 0x80011c <timer0_millis+0x1>
 2f2:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <timer0_millis+0x2>
 2f6:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <timer0_millis+0x3>
	SERG = oldSREG;
 2fa:	2f bf       	out	0x3f, r18	; 63

	return m;
}
 2fc:	08 95       	ret

000002fe <_ZN12DanyBotTimer6microsEv>:

uint32_t DanyBotTimer::micros() {
	uint32_t m;
	uint8_t oldSREG = SERG;
 2fe:	3f b7       	in	r19, 0x3f	; 63
	uint8_t t;

	cli();
 300:	f8 94       	cli
	m = timer0_overflow_count;
 302:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <timer0_overflow_count>
 306:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <timer0_overflow_count+0x1>
 30a:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <timer0_overflow_count+0x2>
 30e:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <timer0_overflow_count+0x3>
	t = TCNT0;
 312:	26 b5       	in	r18, 0x26	; 38

	if((TIFR0 & (1 << TOV0)) && (t  < 255)){
 314:	a8 9b       	sbis	0x15, 0	; 21
 316:	02 c0       	rjmp	.+4      	; 0x31c <_ZN12DanyBotTimer6microsEv+0x1e>
 318:	2f 3f       	cpi	r18, 0xFF	; 255
 31a:	a1 f4       	brne	.+40     	; 0x344 <_ZN12DanyBotTimer6microsEv+0x46>
		m++;
	}
	SERG = oldSREG;
 31c:	3f bf       	out	0x3f, r19	; 63

	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
 31e:	ba 2f       	mov	r27, r26
 320:	a9 2f       	mov	r26, r25
 322:	98 2f       	mov	r25, r24
 324:	88 27       	eor	r24, r24
 326:	82 0f       	add	r24, r18
 328:	91 1d       	adc	r25, r1
 32a:	a1 1d       	adc	r26, r1
 32c:	b1 1d       	adc	r27, r1
 32e:	bc 01       	movw	r22, r24
 330:	cd 01       	movw	r24, r26
 332:	66 0f       	add	r22, r22
 334:	77 1f       	adc	r23, r23
 336:	88 1f       	adc	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	66 0f       	add	r22, r22
 33c:	77 1f       	adc	r23, r23
 33e:	88 1f       	adc	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	08 95       	ret
	cli();
	m = timer0_overflow_count;
	t = TCNT0;

	if((TIFR0 & (1 << TOV0)) && (t  < 255)){
		m++;
 344:	01 96       	adiw	r24, 0x01	; 1
 346:	a1 1d       	adc	r26, r1
 348:	b1 1d       	adc	r27, r1
 34a:	e8 cf       	rjmp	.-48     	; 0x31c <_ZN12DanyBotTimer6microsEv+0x1e>

0000034c <_ZN12DanyBotTimer5startEv>:

	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void DanyBotTimer::start() {
	timer0_overflow_count = 0;
 34c:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <timer0_overflow_count>
 350:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <timer0_overflow_count+0x1>
 354:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <timer0_overflow_count+0x2>
 358:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <timer0_overflow_count+0x3>
	timer0_millis = 0;
 35c:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <timer0_millis>
 360:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <timer0_millis+0x1>
 364:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <timer0_millis+0x2>
 368:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <timer0_millis+0x3>
	timer0_fract = 0;
 36c:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end>
	TIMSK0 |= (1 << TOIE0);
 370:	ee e6       	ldi	r30, 0x6E	; 110
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	80 81       	ld	r24, Z
 376:	81 60       	ori	r24, 0x01	; 1
 378:	80 83       	st	Z, r24
 37a:	08 95       	ret

0000037c <_ZN12DanyBotTimer4stopEv>:
}

void DanyBotTimer::stop() {
	TIMSK0 &= ~(1 << TOIE0);
 37c:	ee e6       	ldi	r30, 0x6E	; 110
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	80 81       	ld	r24, Z
 382:	8e 7f       	andi	r24, 0xFE	; 254
 384:	80 83       	st	Z, r24
 386:	08 95       	ret

00000388 <__vector_16>:
}

ISR(TIMER0_OVF_vect){
 388:	1f 92       	push	r1
 38a:	0f 92       	push	r0
 38c:	0f b6       	in	r0, 0x3f	; 63
 38e:	0f 92       	push	r0
 390:	11 24       	eor	r1, r1
 392:	2f 93       	push	r18
 394:	3f 93       	push	r19
 396:	8f 93       	push	r24
 398:	9f 93       	push	r25
 39a:	af 93       	push	r26
 39c:	bf 93       	push	r27
	uint32_t m = timer0_millis;
 39e:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <timer0_millis>
 3a2:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <timer0_millis+0x1>
 3a6:	a0 91 1d 01 	lds	r26, 0x011D	; 0x80011d <timer0_millis+0x2>
 3aa:	b0 91 1e 01 	lds	r27, 0x011E	; 0x80011e <timer0_millis+0x3>
	uint8_t f = timer0_fract;
 3ae:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <__data_end>

	m += MILLIS_INC;
	f += FRACT_INC;
 3b2:	23 e0       	ldi	r18, 0x03	; 3
 3b4:	23 0f       	add	r18, r19
	if(f >= FRACT_MAX) {
 3b6:	2d 37       	cpi	r18, 0x7D	; 125
 3b8:	20 f4       	brcc	.+8      	; 0x3c2 <__vector_16+0x3a>

ISR(TIMER0_OVF_vect){
	uint32_t m = timer0_millis;
	uint8_t f = timer0_fract;

	m += MILLIS_INC;
 3ba:	01 96       	adiw	r24, 0x01	; 1
 3bc:	a1 1d       	adc	r26, r1
 3be:	b1 1d       	adc	r27, r1
 3c0:	05 c0       	rjmp	.+10     	; 0x3cc <__vector_16+0x44>
	f += FRACT_INC;
	if(f >= FRACT_MAX) {
		f -= FRACT_MAX;
 3c2:	26 e8       	ldi	r18, 0x86	; 134
 3c4:	23 0f       	add	r18, r19
		m += 1;
 3c6:	02 96       	adiw	r24, 0x02	; 2
 3c8:	a1 1d       	adc	r26, r1
 3ca:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 3cc:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <__data_end>
	timer0_millis = m;
 3d0:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <timer0_millis>
 3d4:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <timer0_millis+0x1>
 3d8:	a0 93 1d 01 	sts	0x011D, r26	; 0x80011d <timer0_millis+0x2>
 3dc:	b0 93 1e 01 	sts	0x011E, r27	; 0x80011e <timer0_millis+0x3>
	timer0_overflow_count++;
 3e0:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <timer0_overflow_count>
 3e4:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <timer0_overflow_count+0x1>
 3e8:	a0 91 21 01 	lds	r26, 0x0121	; 0x800121 <timer0_overflow_count+0x2>
 3ec:	b0 91 22 01 	lds	r27, 0x0122	; 0x800122 <timer0_overflow_count+0x3>
 3f0:	01 96       	adiw	r24, 0x01	; 1
 3f2:	a1 1d       	adc	r26, r1
 3f4:	b1 1d       	adc	r27, r1
 3f6:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <timer0_overflow_count>
 3fa:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <timer0_overflow_count+0x1>
 3fe:	a0 93 21 01 	sts	0x0121, r26	; 0x800121 <timer0_overflow_count+0x2>
 402:	b0 93 22 01 	sts	0x0122, r27	; 0x800122 <timer0_overflow_count+0x3>
 406:	bf 91       	pop	r27
 408:	af 91       	pop	r26
 40a:	9f 91       	pop	r25
 40c:	8f 91       	pop	r24
 40e:	3f 91       	pop	r19
 410:	2f 91       	pop	r18
 412:	0f 90       	pop	r0
 414:	0f be       	out	0x3f, r0	; 63
 416:	0f 90       	pop	r0
 418:	1f 90       	pop	r1
 41a:	18 95       	reti

0000041c <_ZN17DanyBotLineSensor8emiterOnEv>:
	}
	DanyBotLineSensor::emiterOff();
}

void DanyBotLineSensor::emiterOn() {
	PORTD |= (1 << PORTD2);
 41c:	5a 9a       	sbi	0x0b, 2	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 41e:	8f e8       	ldi	r24, 0x8F	; 143
 420:	91 e0       	ldi	r25, 0x01	; 1
 422:	01 97       	sbiw	r24, 0x01	; 1
 424:	f1 f7       	brne	.-4      	; 0x422 <_ZN17DanyBotLineSensor8emiterOnEv+0x6>
 426:	00 c0       	rjmp	.+0      	; 0x428 <_ZN17DanyBotLineSensor8emiterOnEv+0xc>
 428:	00 00       	nop
 42a:	08 95       	ret

0000042c <_ZN17DanyBotLineSensor9emiterOffEv>:
	_delay_us(100);
}

void DanyBotLineSensor::emiterOff() {
	PORTD &= ~(1 << PORTD2);
 42c:	5a 98       	cbi	0x0b, 2	; 11
 42e:	8f e8       	ldi	r24, 0x8F	; 143
 430:	91 e0       	ldi	r25, 0x01	; 1
 432:	01 97       	sbiw	r24, 0x01	; 1
 434:	f1 f7       	brne	.-4      	; 0x432 <_ZN17DanyBotLineSensor9emiterOffEv+0x6>
 436:	00 c0       	rjmp	.+0      	; 0x438 <_ZN17DanyBotLineSensor9emiterOffEv+0xc>
 438:	00 00       	nop
 43a:	08 95       	ret

0000043c <_ZN17DanyBotLineSensor5resetEv>:
void DanyBotLineSensor::setUp() {
	DanyBotLineSensor::reset();
	DDRD |= (1 << PORTD2);
}

void DanyBotLineSensor::reset() {
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	90 e0       	ldi	r25, 0x00	; 0
	for(uint8_t i = 0; i < NO_SENSOR; i++) {
		calibratedMax[i] = 0;
		calibratedMin[i] = TIMEOUT;
 440:	20 ed       	ldi	r18, 0xD0	; 208
 442:	37 e0       	ldi	r19, 0x07	; 7
	DDRD |= (1 << PORTD2);
}

void DanyBotLineSensor::reset() {
	for(uint8_t i = 0; i < NO_SENSOR; i++) {
		calibratedMax[i] = 0;
 444:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <calibratedMax>
 448:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <calibratedMax+0x1>
 44c:	e8 0f       	add	r30, r24
 44e:	f9 1f       	adc	r31, r25
 450:	11 82       	std	Z+1, r1	; 0x01
 452:	10 82       	st	Z, r1
		calibratedMin[i] = TIMEOUT;
 454:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <calibratedMin>
 458:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <calibratedMin+0x1>
 45c:	e8 0f       	add	r30, r24
 45e:	f9 1f       	adc	r31, r25
 460:	31 83       	std	Z+1, r19	; 0x01
 462:	20 83       	st	Z, r18
 464:	02 96       	adiw	r24, 0x02	; 2
	DanyBotLineSensor::reset();
	DDRD |= (1 << PORTD2);
}

void DanyBotLineSensor::reset() {
	for(uint8_t i = 0; i < NO_SENSOR; i++) {
 466:	8c 30       	cpi	r24, 0x0C	; 12
 468:	91 05       	cpc	r25, r1
 46a:	61 f7       	brne	.-40     	; 0x444 <_ZN17DanyBotLineSensor5resetEv+0x8>
		calibratedMax[i] = 0;
		calibratedMin[i] = TIMEOUT;
	}
	DanyBotLineSensor::emiterOff();
 46c:	0e 94 16 02 	call	0x42c	; 0x42c <_ZN17DanyBotLineSensor9emiterOffEv>
 470:	08 95       	ret

00000472 <_ZN17DanyBotLineSensor5setUpEv>:
uint16_t *calibratedMax;
uint16_t *calibratedMin;
bool onLine = false;

void DanyBotLineSensor::setUp() {
	DanyBotLineSensor::reset();
 472:	0e 94 1e 02 	call	0x43c	; 0x43c <_ZN17DanyBotLineSensor5resetEv>
	DDRD |= (1 << PORTD2);
 476:	52 9a       	sbi	0x0a, 2	; 10
 478:	08 95       	ret

0000047a <_ZN17DanyBotLineSensor5_readEPj>:
	DanyBotLineSensor::emiterOn();
	DanyBotLineSensor::_read(sensor);
	DanyBotLineSensor::emiterOff();
}

void DanyBotLineSensor::_read(uint16_t *sensor) {
 47a:	cf 93       	push	r28
 47c:	df 93       	push	r29
 47e:	ec 01       	movw	r28, r24
 480:	fc 01       	movw	r30, r24
 482:	9c 01       	movw	r18, r24
 484:	24 5f       	subi	r18, 0xF4	; 244
 486:	3f 4f       	sbci	r19, 0xFF	; 255
	
	for (uint8_t i = 0; i < NO_SENSOR; i++) {
		sensor[i] = TIMEOUT;
 488:	80 ed       	ldi	r24, 0xD0	; 208
 48a:	97 e0       	ldi	r25, 0x07	; 7
 48c:	81 93       	st	Z+, r24
 48e:	91 93       	st	Z+, r25
	DanyBotLineSensor::emiterOff();
}

void DanyBotLineSensor::_read(uint16_t *sensor) {
	
	for (uint8_t i = 0; i < NO_SENSOR; i++) {
 490:	e2 17       	cp	r30, r18
 492:	f3 07       	cpc	r31, r19
 494:	d9 f7       	brne	.-10     	; 0x48c <_ZN17DanyBotLineSensor5_readEPj+0x12>
		sensor[i] = TIMEOUT;
	}
	
	DDRB |= (1 << PORTB3);
 496:	23 9a       	sbi	0x04, 3	; 4
	DDRD |= (1 << PORTD4) | (1 << PORTD5);
 498:	8a b1       	in	r24, 0x0a	; 10
 49a:	80 63       	ori	r24, 0x30	; 48
 49c:	8a b9       	out	0x0a, r24	; 10
	DDRC |= (1 << PORTC0) | (1 << PORTC1) | (1 << PORTC2);
 49e:	87 b1       	in	r24, 0x07	; 7
 4a0:	87 60       	ori	r24, 0x07	; 7
 4a2:	87 b9       	out	0x07, r24	; 7
	
	PORTB |= (1 << PORTB3);
 4a4:	2b 9a       	sbi	0x05, 3	; 5
	PORTD |= (1 << PORTD4) | (1 << PORTD5);
 4a6:	8b b1       	in	r24, 0x0b	; 11
 4a8:	80 63       	ori	r24, 0x30	; 48
 4aa:	8b b9       	out	0x0b, r24	; 11
	PORTC |= (1 << PORTC0) | (1 << PORTC1) | (1 << PORTC2);
 4ac:	88 b1       	in	r24, 0x08	; 8
 4ae:	87 60       	ori	r24, 0x07	; 7
 4b0:	88 b9       	out	0x08, r24	; 8
 4b2:	25 e3       	ldi	r18, 0x35	; 53
 4b4:	2a 95       	dec	r18
 4b6:	f1 f7       	brne	.-4      	; 0x4b4 <_ZN17DanyBotLineSensor5_readEPj+0x3a>
 4b8:	00 00       	nop
	
	_delay_us(10);
	
	DDRB &= ~(1 << PORTB3);
 4ba:	23 98       	cbi	0x04, 3	; 4
	DDRD &= ~(1 << PORTD4) & ~(1 << PORTD5);
 4bc:	8a b1       	in	r24, 0x0a	; 10
 4be:	8f 7c       	andi	r24, 0xCF	; 207
 4c0:	8a b9       	out	0x0a, r24	; 10
	DDRC &= ~(1 << PORTC0) & ~(1 << PORTC1) & ~(1 << PORTC2);
 4c2:	87 b1       	in	r24, 0x07	; 7
 4c4:	88 7f       	andi	r24, 0xF8	; 248
 4c6:	87 b9       	out	0x07, r24	; 7
	
	PORTB &= ~(1 << PORTB3);
 4c8:	2b 98       	cbi	0x05, 3	; 5
	PORTD &= ~(1 << PORTD4) & ~(1 << PORTD5);
 4ca:	8b b1       	in	r24, 0x0b	; 11
 4cc:	8f 7c       	andi	r24, 0xCF	; 207
 4ce:	8b b9       	out	0x0b, r24	; 11
	PORTC &= ~(1 << PORTC0) & ~(1 << PORTC1) & ~(1 << PORTC2);
 4d0:	88 b1       	in	r24, 0x08	; 8
 4d2:	88 7f       	andi	r24, 0xF8	; 248
 4d4:	88 b9       	out	0x08, r24	; 8
	
	DanyBotTimer::start();
 4d6:	0e 94 a6 01 	call	0x34c	; 0x34c <_ZN12DanyBotTimer5startEv>
	uint32_t timeStamp = DanyBotTimer::micros();
 4da:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_ZN12DanyBotTimer6microsEv>
	while (timeStamp < TIMEOUT) {
 4de:	60 3d       	cpi	r22, 0xD0	; 208
 4e0:	27 e0       	ldi	r18, 0x07	; 7
 4e2:	72 07       	cpc	r23, r18
 4e4:	81 05       	cpc	r24, r1
 4e6:	91 05       	cpc	r25, r1
 4e8:	30 f5       	brcc	.+76     	; 0x536 <_ZN17DanyBotLineSensor5_readEPj+0xbc>
		if(!(PORTD & ~(1 << PORTD4)))
 4ea:	2b b1       	in	r18, 0x0b	; 11
 4ec:	2f 7e       	andi	r18, 0xEF	; 239
 4ee:	11 f4       	brne	.+4      	; 0x4f4 <_ZN17DanyBotLineSensor5_readEPj+0x7a>
			sensor[0] = timeStamp;
 4f0:	79 83       	std	Y+1, r23	; 0x01
 4f2:	68 83       	st	Y, r22
				
		if(!(PORTC & ~(1 << PORTC2)))
 4f4:	28 b1       	in	r18, 0x08	; 8
 4f6:	2b 7f       	andi	r18, 0xFB	; 251
 4f8:	11 f4       	brne	.+4      	; 0x4fe <_ZN17DanyBotLineSensor5_readEPj+0x84>
			sensor[1] = timeStamp;
 4fa:	7b 83       	std	Y+3, r23	; 0x03
 4fc:	6a 83       	std	Y+2, r22	; 0x02
				
		if(!(PORTB & ~(1 << PORTB3)))
 4fe:	25 b1       	in	r18, 0x05	; 5
 500:	27 7f       	andi	r18, 0xF7	; 247
 502:	11 f4       	brne	.+4      	; 0x508 <_ZN17DanyBotLineSensor5_readEPj+0x8e>
			sensor[2] = timeStamp;
 504:	7d 83       	std	Y+5, r23	; 0x05
 506:	6c 83       	std	Y+4, r22	; 0x04
				
		if(!(PORTC & ~(1 << PORTC0)))
 508:	28 b1       	in	r18, 0x08	; 8
 50a:	2e 7f       	andi	r18, 0xFE	; 254
 50c:	11 f4       	brne	.+4      	; 0x512 <_ZN17DanyBotLineSensor5_readEPj+0x98>
			sensor[3] = timeStamp;
 50e:	7f 83       	std	Y+7, r23	; 0x07
 510:	6e 83       	std	Y+6, r22	; 0x06
				
		if(!(PORTC & ~(1 << PORTC1)))
 512:	28 b1       	in	r18, 0x08	; 8
 514:	2d 7f       	andi	r18, 0xFD	; 253
 516:	11 f4       	brne	.+4      	; 0x51c <_ZN17DanyBotLineSensor5_readEPj+0xa2>
			sensor[4] = timeStamp;
 518:	79 87       	std	Y+9, r23	; 0x09
 51a:	68 87       	std	Y+8, r22	; 0x08
				
		if(!(PORTC & ~(1 << PORTC2)))
 51c:	28 b1       	in	r18, 0x08	; 8
 51e:	2b 7f       	andi	r18, 0xFB	; 251
 520:	11 f4       	brne	.+4      	; 0x526 <_ZN17DanyBotLineSensor5_readEPj+0xac>
			sensor[5] = timeStamp;
 522:	7b 87       	std	Y+11, r23	; 0x0b
 524:	6a 87       	std	Y+10, r22	; 0x0a
		
		timeStamp = DanyBotTimer::micros();
 526:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_ZN12DanyBotTimer6microsEv>
	PORTD &= ~(1 << PORTD4) & ~(1 << PORTD5);
	PORTC &= ~(1 << PORTC0) & ~(1 << PORTC1) & ~(1 << PORTC2);
	
	DanyBotTimer::start();
	uint32_t timeStamp = DanyBotTimer::micros();
	while (timeStamp < TIMEOUT) {
 52a:	60 3d       	cpi	r22, 0xD0	; 208
 52c:	27 e0       	ldi	r18, 0x07	; 7
 52e:	72 07       	cpc	r23, r18
 530:	81 05       	cpc	r24, r1
 532:	91 05       	cpc	r25, r1
 534:	d0 f2       	brcs	.-76     	; 0x4ea <_ZN17DanyBotLineSensor5_readEPj+0x70>
		if(!(PORTC & ~(1 << PORTC2)))
			sensor[5] = timeStamp;
		
		timeStamp = DanyBotTimer::micros();
	}
	DanyBotTimer::stop();
 536:	0e 94 be 01 	call	0x37c	; 0x37c <_ZN12DanyBotTimer4stopEv>
 53a:	df 91       	pop	r29
 53c:	cf 91       	pop	r28
 53e:	08 95       	ret

00000540 <_ZN17DanyBotLineSensor4readEPj>:
	}
	previousValue = avg / sum;
	return previousValue;
}

void DanyBotLineSensor::read(uint16_t *sensor) {
 540:	cf 93       	push	r28
 542:	df 93       	push	r29
 544:	ec 01       	movw	r28, r24
	DanyBotLineSensor::emiterOn();
 546:	0e 94 0e 02 	call	0x41c	; 0x41c <_ZN17DanyBotLineSensor8emiterOnEv>
	DanyBotLineSensor::_read(sensor);
 54a:	ce 01       	movw	r24, r28
 54c:	0e 94 3d 02 	call	0x47a	; 0x47a <_ZN17DanyBotLineSensor5_readEPj>
	DanyBotLineSensor::emiterOff();
 550:	0e 94 16 02 	call	0x42c	; 0x42c <_ZN17DanyBotLineSensor9emiterOffEv>
}
 554:	df 91       	pop	r29
 556:	cf 91       	pop	r28
 558:	08 95       	ret

0000055a <_ZN17DanyBotLineSensor9calibrateEv>:
void DanyBotLineSensor::emiterOff() {
	PORTD &= ~(1 << PORTD2);
	_delay_us(100);
}

void DanyBotLineSensor::calibrate() {
 55a:	1f 93       	push	r17
 55c:	cf 93       	push	r28
 55e:	df 93       	push	r29
 560:	cd b7       	in	r28, 0x3d	; 61
 562:	de b7       	in	r29, 0x3e	; 62
 564:	2c 97       	sbiw	r28, 0x0c	; 12
 566:	0f b6       	in	r0, 0x3f	; 63
 568:	f8 94       	cli
 56a:	de bf       	out	0x3e, r29	; 62
 56c:	0f be       	out	0x3f, r0	; 63
 56e:	cd bf       	out	0x3d, r28	; 61
	uint16_t sensor[NO_SENSOR];
	for(uint8_t i = 0; i < 10; i++) {
 570:	10 e0       	ldi	r17, 0x00	; 0
		read(sensor);
 572:	ce 01       	movw	r24, r28
 574:	01 96       	adiw	r24, 0x01	; 1
 576:	0e 94 a0 02 	call	0x540	; 0x540 <_ZN17DanyBotLineSensor4readEPj>
 57a:	fe 01       	movw	r30, r28
 57c:	31 96       	adiw	r30, 0x01	; 1
 57e:	80 e0       	ldi	r24, 0x00	; 0
 580:	90 e0       	ldi	r25, 0x00	; 0
		for(uint8_t j = 0; j < NO_SENSOR; j++) {
			if(i == 0 || sensor[j] > calibratedMin[j])
 582:	11 23       	and	r17, r17
 584:	c1 f1       	breq	.+112    	; 0x5f6 <_ZN17DanyBotLineSensor9calibrateEv+0x9c>
 586:	a0 91 26 01 	lds	r26, 0x0126	; 0x800126 <calibratedMin>
 58a:	b0 91 27 01 	lds	r27, 0x0127	; 0x800127 <calibratedMin+0x1>
 58e:	a8 0f       	add	r26, r24
 590:	b9 1f       	adc	r27, r25
 592:	40 81       	ld	r20, Z
 594:	51 81       	ldd	r21, Z+1	; 0x01
 596:	2d 91       	ld	r18, X+
 598:	3c 91       	ld	r19, X
 59a:	24 17       	cp	r18, r20
 59c:	35 07       	cpc	r19, r21
 59e:	00 f1       	brcs	.+64     	; 0x5e0 <_ZN17DanyBotLineSensor9calibrateEv+0x86>
				calibratedMin[j] = sensor[j];
			if(i == 0 || sensor[j] < calibratedMax[j])
 5a0:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <calibratedMax>
 5a4:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <calibratedMax+0x1>
 5a8:	a8 0f       	add	r26, r24
 5aa:	b9 1f       	adc	r27, r25
 5ac:	40 81       	ld	r20, Z
 5ae:	51 81       	ldd	r21, Z+1	; 0x01
 5b0:	2d 91       	ld	r18, X+
 5b2:	3c 91       	ld	r19, X
 5b4:	42 17       	cp	r20, r18
 5b6:	53 07       	cpc	r21, r19
 5b8:	50 f4       	brcc	.+20     	; 0x5ce <_ZN17DanyBotLineSensor9calibrateEv+0x74>
				calibratedMax[j] = sensor[j];
 5ba:	20 81       	ld	r18, Z
 5bc:	31 81       	ldd	r19, Z+1	; 0x01
 5be:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <calibratedMax>
 5c2:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <calibratedMax+0x1>
 5c6:	a8 0f       	add	r26, r24
 5c8:	b9 1f       	adc	r27, r25
 5ca:	2d 93       	st	X+, r18
 5cc:	3c 93       	st	X, r19
 5ce:	32 96       	adiw	r30, 0x02	; 2
 5d0:	02 96       	adiw	r24, 0x02	; 2

void DanyBotLineSensor::calibrate() {
	uint16_t sensor[NO_SENSOR];
	for(uint8_t i = 0; i < 10; i++) {
		read(sensor);
		for(uint8_t j = 0; j < NO_SENSOR; j++) {
 5d2:	8c 30       	cpi	r24, 0x0C	; 12
 5d4:	91 05       	cpc	r25, r1
 5d6:	a9 f6       	brne	.-86     	; 0x582 <_ZN17DanyBotLineSensor9calibrateEv+0x28>
	_delay_us(100);
}

void DanyBotLineSensor::calibrate() {
	uint16_t sensor[NO_SENSOR];
	for(uint8_t i = 0; i < 10; i++) {
 5d8:	1f 5f       	subi	r17, 0xFF	; 255
 5da:	1a 30       	cpi	r17, 0x0A	; 10
 5dc:	51 f6       	brne	.-108    	; 0x572 <_ZN17DanyBotLineSensor9calibrateEv+0x18>
 5de:	16 c0       	rjmp	.+44     	; 0x60c <_ZN17DanyBotLineSensor9calibrateEv+0xb2>
		read(sensor);
		for(uint8_t j = 0; j < NO_SENSOR; j++) {
			if(i == 0 || sensor[j] > calibratedMin[j])
				calibratedMin[j] = sensor[j];
 5e0:	20 81       	ld	r18, Z
 5e2:	31 81       	ldd	r19, Z+1	; 0x01
 5e4:	a0 91 26 01 	lds	r26, 0x0126	; 0x800126 <calibratedMin>
 5e8:	b0 91 27 01 	lds	r27, 0x0127	; 0x800127 <calibratedMin+0x1>
 5ec:	a8 0f       	add	r26, r24
 5ee:	b9 1f       	adc	r27, r25
 5f0:	2d 93       	st	X+, r18
 5f2:	3c 93       	st	X, r19
 5f4:	d5 cf       	rjmp	.-86     	; 0x5a0 <_ZN17DanyBotLineSensor9calibrateEv+0x46>
 5f6:	20 81       	ld	r18, Z
 5f8:	31 81       	ldd	r19, Z+1	; 0x01
 5fa:	a0 91 26 01 	lds	r26, 0x0126	; 0x800126 <calibratedMin>
 5fe:	b0 91 27 01 	lds	r27, 0x0127	; 0x800127 <calibratedMin+0x1>
 602:	a8 0f       	add	r26, r24
 604:	b9 1f       	adc	r27, r25
 606:	2d 93       	st	X+, r18
 608:	3c 93       	st	X, r19
 60a:	d7 cf       	rjmp	.-82     	; 0x5ba <_ZN17DanyBotLineSensor9calibrateEv+0x60>
			if(i == 0 || sensor[j] < calibratedMax[j])
				calibratedMax[j] = sensor[j];
		}
	}
}
 60c:	2c 96       	adiw	r28, 0x0c	; 12
 60e:	0f b6       	in	r0, 0x3f	; 63
 610:	f8 94       	cli
 612:	de bf       	out	0x3e, r29	; 62
 614:	0f be       	out	0x3f, r0	; 63
 616:	cd bf       	out	0x3d, r28	; 61
 618:	df 91       	pop	r29
 61a:	cf 91       	pop	r28
 61c:	1f 91       	pop	r17
 61e:	08 95       	ret

00000620 <_ZN17DanyBotLineSensor13readCalibrateEPj>:

void DanyBotLineSensor::readCalibrate(uint16_t *sensor) {
 620:	cf 92       	push	r12
 622:	df 92       	push	r13
 624:	ef 92       	push	r14
 626:	ff 92       	push	r15
 628:	0f 93       	push	r16
 62a:	1f 93       	push	r17
 62c:	cf 93       	push	r28
 62e:	df 93       	push	r29
 630:	d8 2f       	mov	r29, r24
 632:	c9 2f       	mov	r28, r25
	uint16_t denominator;
	read(sensor);
 634:	0e 94 a0 02 	call	0x540	; 0x540 <_ZN17DanyBotLineSensor4readEPj>
 638:	0d 2f       	mov	r16, r29
 63a:	1c 2f       	mov	r17, r28
 63c:	c0 e0       	ldi	r28, 0x00	; 0
 63e:	d0 e0       	ldi	r29, 0x00	; 0
			temp = (((int32_t)sensor[i] - calibratedMin[i]) * MAX_VALUE / denominator);
			sensor[i]  = temp;
		if(temp < MIN_VALUE)
			sensor[i] = MIN_VALUE;
		if(temp > MAX_VALUE)
			sensor[i] = MAX_VALUE;
 640:	0f 2e       	mov	r0, r31
 642:	f8 ee       	ldi	r31, 0xE8	; 232
 644:	ef 2e       	mov	r14, r31
 646:	f3 e0       	ldi	r31, 0x03	; 3
 648:	ff 2e       	mov	r15, r31
 64a:	f0 2d       	mov	r31, r0

void DanyBotLineSensor::readCalibrate(uint16_t *sensor) {
	uint16_t denominator;
	read(sensor);
	for (uint8_t i = 0; i < NO_SENSOR; i++) {
		denominator = calibratedMax[i] - calibratedMin[i];
 64c:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <calibratedMin>
 650:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <calibratedMin+0x1>
 654:	ec 0f       	add	r30, r28
 656:	fd 1f       	adc	r31, r29
 658:	80 81       	ld	r24, Z
 65a:	91 81       	ldd	r25, Z+1	; 0x01
 65c:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <calibratedMax>
 660:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <calibratedMax+0x1>
 664:	ec 0f       	add	r30, r28
 666:	fd 1f       	adc	r31, r29
 668:	20 81       	ld	r18, Z
 66a:	31 81       	ldd	r19, Z+1	; 0x01
 66c:	f9 01       	movw	r30, r18
 66e:	e8 1b       	sub	r30, r24
 670:	f9 0b       	sbc	r31, r25
		int16_t temp = 0;
		if(denominator != 0)
 672:	71 f1       	breq	.+92     	; 0x6d0 <_ZN17DanyBotLineSensor13readCalibrateEPj+0xb0>
 674:	68 01       	movw	r12, r16
			temp = (((int32_t)sensor[i] - calibratedMin[i]) * MAX_VALUE / denominator);
 676:	d8 01       	movw	r26, r16
 678:	2d 91       	ld	r18, X+
 67a:	3c 91       	ld	r19, X
 67c:	a9 01       	movw	r20, r18
 67e:	60 e0       	ldi	r22, 0x00	; 0
 680:	70 e0       	ldi	r23, 0x00	; 0
 682:	9a 01       	movw	r18, r20
 684:	ab 01       	movw	r20, r22
 686:	28 1b       	sub	r18, r24
 688:	39 0b       	sbc	r19, r25
 68a:	41 09       	sbc	r20, r1
 68c:	51 09       	sbc	r21, r1
 68e:	a8 ee       	ldi	r26, 0xE8	; 232
 690:	b3 e0       	ldi	r27, 0x03	; 3
 692:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__muluhisi3>
 696:	9f 01       	movw	r18, r30
 698:	40 e0       	ldi	r20, 0x00	; 0
 69a:	50 e0       	ldi	r21, 0x00	; 0
 69c:	0e 94 be 07 	call	0xf7c	; 0xf7c <__divmodsi4>
 6a0:	c9 01       	movw	r24, r18
			sensor[i]  = temp;
		if(temp < MIN_VALUE)
 6a2:	99 23       	and	r25, r25
 6a4:	24 f0       	brlt	.+8      	; 0x6ae <_ZN17DanyBotLineSensor13readCalibrateEPj+0x8e>
	for (uint8_t i = 0; i < NO_SENSOR; i++) {
		denominator = calibratedMax[i] - calibratedMin[i];
		int16_t temp = 0;
		if(denominator != 0)
			temp = (((int32_t)sensor[i] - calibratedMin[i]) * MAX_VALUE / denominator);
			sensor[i]  = temp;
 6a6:	f8 01       	movw	r30, r16
 6a8:	31 83       	std	Z+1, r19	; 0x01
 6aa:	20 83       	st	Z, r18
 6ac:	03 c0       	rjmp	.+6      	; 0x6b4 <_ZN17DanyBotLineSensor13readCalibrateEPj+0x94>
		if(temp < MIN_VALUE)
			sensor[i] = MIN_VALUE;
 6ae:	d8 01       	movw	r26, r16
 6b0:	1d 92       	st	X+, r1
 6b2:	1c 92       	st	X, r1
		if(temp > MAX_VALUE)
 6b4:	89 3e       	cpi	r24, 0xE9	; 233
 6b6:	93 40       	sbci	r25, 0x03	; 3
 6b8:	1c f0       	brlt	.+6      	; 0x6c0 <_ZN17DanyBotLineSensor13readCalibrateEPj+0xa0>
			sensor[i] = MAX_VALUE;
 6ba:	f6 01       	movw	r30, r12
 6bc:	f1 82       	std	Z+1, r15	; 0x01
 6be:	e0 82       	st	Z, r14
 6c0:	22 96       	adiw	r28, 0x02	; 2
 6c2:	0e 5f       	subi	r16, 0xFE	; 254
 6c4:	1f 4f       	sbci	r17, 0xFF	; 255
}

void DanyBotLineSensor::readCalibrate(uint16_t *sensor) {
	uint16_t denominator;
	read(sensor);
	for (uint8_t i = 0; i < NO_SENSOR; i++) {
 6c6:	cc 30       	cpi	r28, 0x0C	; 12
 6c8:	d1 05       	cpc	r29, r1
 6ca:	09 f0       	breq	.+2      	; 0x6ce <_ZN17DanyBotLineSensor13readCalibrateEPj+0xae>
 6cc:	bf cf       	rjmp	.-130    	; 0x64c <_ZN17DanyBotLineSensor13readCalibrateEPj+0x2c>
 6ce:	04 c0       	rjmp	.+8      	; 0x6d8 <_ZN17DanyBotLineSensor13readCalibrateEPj+0xb8>
		denominator = calibratedMax[i] - calibratedMin[i];
		int16_t temp = 0;
		if(denominator != 0)
			temp = (((int32_t)sensor[i] - calibratedMin[i]) * MAX_VALUE / denominator);
			sensor[i]  = temp;
 6d0:	d8 01       	movw	r26, r16
 6d2:	1d 92       	st	X+, r1
 6d4:	1c 92       	st	X, r1
 6d6:	f4 cf       	rjmp	.-24     	; 0x6c0 <_ZN17DanyBotLineSensor13readCalibrateEPj+0xa0>
		if(temp < MIN_VALUE)
			sensor[i] = MIN_VALUE;
		if(temp > MAX_VALUE)
			sensor[i] = MAX_VALUE;
	}
}
 6d8:	df 91       	pop	r29
 6da:	cf 91       	pop	r28
 6dc:	1f 91       	pop	r17
 6de:	0f 91       	pop	r16
 6e0:	ff 90       	pop	r15
 6e2:	ef 90       	pop	r14
 6e4:	df 90       	pop	r13
 6e6:	cf 90       	pop	r12
 6e8:	08 95       	ret

000006ea <_ZN17DanyBotLineSensor8readLineEPj>:

uint16_t DanyBotLineSensor::readLine(uint16_t *sensor) {
 6ea:	7f 92       	push	r7
 6ec:	8f 92       	push	r8
 6ee:	9f 92       	push	r9
 6f0:	af 92       	push	r10
 6f2:	bf 92       	push	r11
 6f4:	cf 92       	push	r12
 6f6:	df 92       	push	r13
 6f8:	ef 92       	push	r14
 6fa:	ff 92       	push	r15
 6fc:	0f 93       	push	r16
 6fe:	1f 93       	push	r17
 700:	cf 93       	push	r28
 702:	df 93       	push	r29
 704:	08 2f       	mov	r16, r24
 706:	19 2f       	mov	r17, r25
	onLine = false;
 708:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <onLine>
	static uint16_t previousValue;
	readCalibrate(sensor);
 70c:	0e 94 10 03 	call	0x620	; 0x620 <_ZN17DanyBotLineSensor13readCalibrateEPj>
 710:	c0 2f       	mov	r28, r16
 712:	d1 2f       	mov	r29, r17
 714:	c1 2c       	mov	r12, r1
 716:	d1 2c       	mov	r13, r1
 718:	76 01       	movw	r14, r12
	uint32_t avg = 0;
	uint16_t sum = 0;
 71a:	00 e0       	ldi	r16, 0x00	; 0
 71c:	10 e0       	ldi	r17, 0x00	; 0

uint16_t DanyBotLineSensor::readLine(uint16_t *sensor) {
	onLine = false;
	static uint16_t previousValue;
	readCalibrate(sensor);
	uint32_t avg = 0;
 71e:	81 2c       	mov	r8, r1
 720:	91 2c       	mov	r9, r1
 722:	54 01       	movw	r10, r8
	for(uint8_t i = 0; i < NO_SENSOR; i++) {
		if(sensor[i] > BASE_FILTER) {
			avg += (uint32_t)sensor[i] * (i * MAX_VALUE);
			sum += sensor[i];
			if(sensor[i] > ON_LINE_FILTER)
				onLine = true;
 724:	77 24       	eor	r7, r7
 726:	73 94       	inc	r7
	static uint16_t previousValue;
	readCalibrate(sensor);
	uint32_t avg = 0;
	uint16_t sum = 0;
	for(uint8_t i = 0; i < NO_SENSOR; i++) {
		if(sensor[i] > BASE_FILTER) {
 728:	e9 91       	ld	r30, Y+
 72a:	f9 91       	ld	r31, Y+
 72c:	e3 33       	cpi	r30, 0x33	; 51
 72e:	f1 05       	cpc	r31, r1
 730:	80 f0       	brcs	.+32     	; 0x752 <_ZN17DanyBotLineSensor8readLineEPj+0x68>
			avg += (uint32_t)sensor[i] * (i * MAX_VALUE);
 732:	df 01       	movw	r26, r30
 734:	a7 01       	movw	r20, r14
 736:	96 01       	movw	r18, r12
 738:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__muluhisi3>
 73c:	86 0e       	add	r8, r22
 73e:	97 1e       	adc	r9, r23
 740:	a8 1e       	adc	r10, r24
 742:	b9 1e       	adc	r11, r25
			sum += sensor[i];
 744:	0e 0f       	add	r16, r30
 746:	1f 1f       	adc	r17, r31
			if(sensor[i] > ON_LINE_FILTER)
 748:	e9 3c       	cpi	r30, 0xC9	; 201
 74a:	f1 05       	cpc	r31, r1
 74c:	10 f0       	brcs	.+4      	; 0x752 <_ZN17DanyBotLineSensor8readLineEPj+0x68>
				onLine = true;
 74e:	70 92 25 01 	sts	0x0125, r7	; 0x800125 <onLine>
 752:	28 ee       	ldi	r18, 0xE8	; 232
 754:	c2 0e       	add	r12, r18
 756:	23 e0       	ldi	r18, 0x03	; 3
 758:	d2 1e       	adc	r13, r18
 75a:	e1 1c       	adc	r14, r1
 75c:	f1 1c       	adc	r15, r1
	onLine = false;
	static uint16_t previousValue;
	readCalibrate(sensor);
	uint32_t avg = 0;
	uint16_t sum = 0;
	for(uint8_t i = 0; i < NO_SENSOR; i++) {
 75e:	80 e7       	ldi	r24, 0x70	; 112
 760:	c8 16       	cp	r12, r24
 762:	87 e1       	ldi	r24, 0x17	; 23
 764:	d8 06       	cpc	r13, r24
 766:	e1 04       	cpc	r14, r1
 768:	f1 04       	cpc	r15, r1
 76a:	f1 f6       	brne	.-68     	; 0x728 <_ZN17DanyBotLineSensor8readLineEPj+0x3e>
			sum += sensor[i];
			if(sensor[i] > ON_LINE_FILTER)
				onLine = true;
		}
	}
	if(!onLine) {
 76c:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <onLine>
 770:	81 11       	cpse	r24, r1
 772:	0a c0       	rjmp	.+20     	; 0x788 <_ZN17DanyBotLineSensor8readLineEPj+0x9e>
		return previousValue < (LINE_MAX_VALUE / 2) ? LINE_MIN_VALUE : LINE_MAX_VALUE;
 774:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <_ZZN17DanyBotLineSensor8readLineEPjE13previousValue>
 778:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <_ZZN17DanyBotLineSensor8readLineEPjE13previousValue+0x1>
 77c:	84 3c       	cpi	r24, 0xC4	; 196
 77e:	99 40       	sbci	r25, 0x09	; 9
 780:	80 f0       	brcs	.+32     	; 0x7a2 <_ZN17DanyBotLineSensor8readLineEPj+0xb8>
 782:	88 e8       	ldi	r24, 0x88	; 136
 784:	93 e1       	ldi	r25, 0x13	; 19
 786:	0f c0       	rjmp	.+30     	; 0x7a6 <_ZN17DanyBotLineSensor8readLineEPj+0xbc>
	}
	previousValue = avg / sum;
 788:	98 01       	movw	r18, r16
 78a:	40 e0       	ldi	r20, 0x00	; 0
 78c:	50 e0       	ldi	r21, 0x00	; 0
 78e:	c5 01       	movw	r24, r10
 790:	b4 01       	movw	r22, r8
 792:	0e 94 9c 07 	call	0xf38	; 0xf38 <__udivmodsi4>
 796:	c9 01       	movw	r24, r18
 798:	30 93 24 01 	sts	0x0124, r19	; 0x800124 <_ZZN17DanyBotLineSensor8readLineEPjE13previousValue+0x1>
 79c:	20 93 23 01 	sts	0x0123, r18	; 0x800123 <_ZZN17DanyBotLineSensor8readLineEPjE13previousValue>
	return previousValue;
 7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <_ZN17DanyBotLineSensor8readLineEPj+0xbc>
			if(sensor[i] > ON_LINE_FILTER)
				onLine = true;
		}
	}
	if(!onLine) {
		return previousValue < (LINE_MAX_VALUE / 2) ? LINE_MIN_VALUE : LINE_MAX_VALUE;
 7a2:	80 e0       	ldi	r24, 0x00	; 0
 7a4:	90 e0       	ldi	r25, 0x00	; 0
	}
	previousValue = avg / sum;
	return previousValue;
}
 7a6:	df 91       	pop	r29
 7a8:	cf 91       	pop	r28
 7aa:	1f 91       	pop	r17
 7ac:	0f 91       	pop	r16
 7ae:	ff 90       	pop	r15
 7b0:	ef 90       	pop	r14
 7b2:	df 90       	pop	r13
 7b4:	cf 90       	pop	r12
 7b6:	bf 90       	pop	r11
 7b8:	af 90       	pop	r10
 7ba:	9f 90       	pop	r9
 7bc:	8f 90       	pop	r8
 7be:	7f 90       	pop	r7
 7c0:	08 95       	ret

000007c2 <_ZL16currentCharacterv>:
	buzzerSequence = 0;
}
static int8_t currentCharacter() {
	int8_t c = 0;
	do {
		if (use_program_space)
 7c2:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <_ZL17use_program_space>
 7c6:	22 23       	and	r18, r18
 7c8:	31 f0       	breq	.+12     	; 0x7d6 <_ZL16currentCharacterv+0x14>
		c = pgm_read_byte(buzzerSequence);
 7ca:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <buzzerSequence>
 7ce:	f0 91 31 01 	lds	r31, 0x0131	; 0x800131 <buzzerSequence+0x1>
 7d2:	84 91       	lpm	r24, Z
 7d4:	05 c0       	rjmp	.+10     	; 0x7e0 <_ZL16currentCharacterv+0x1e>
		else
		c = *buzzerSequence;
 7d6:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <buzzerSequence>
 7da:	f0 91 31 01 	lds	r31, 0x0131	; 0x800131 <buzzerSequence+0x1>
 7de:	80 81       	ld	r24, Z

		if (c >= 'A' && c <= 'Z')
 7e0:	9f eb       	ldi	r25, 0xBF	; 191
 7e2:	98 0f       	add	r25, r24
 7e4:	9a 31       	cpi	r25, 0x1A	; 26
 7e6:	08 f4       	brcc	.+2      	; 0x7ea <_ZL16currentCharacterv+0x28>
		c += 'a' - 'A';
 7e8:	80 5e       	subi	r24, 0xE0	; 224
	} while (c == ' ' && (buzzerSequence++));
 7ea:	80 32       	cpi	r24, 0x20	; 32
 7ec:	69 f4       	brne	.+26     	; 0x808 <_ZL16currentCharacterv+0x46>
 7ee:	40 91 30 01 	lds	r20, 0x0130	; 0x800130 <buzzerSequence>
 7f2:	50 91 31 01 	lds	r21, 0x0131	; 0x800131 <buzzerSequence+0x1>
 7f6:	ba 01       	movw	r22, r20
 7f8:	6f 5f       	subi	r22, 0xFF	; 255
 7fa:	7f 4f       	sbci	r23, 0xFF	; 255
 7fc:	70 93 31 01 	sts	0x0131, r23	; 0x800131 <buzzerSequence+0x1>
 800:	60 93 30 01 	sts	0x0130, r22	; 0x800130 <buzzerSequence>
	buzzerFinished = 1;
	buzzerSequence = 0;
}
static int8_t currentCharacter() {
	int8_t c = 0;
	do {
 804:	45 2b       	or	r20, r21
 806:	f9 f6       	brne	.-66     	; 0x7c6 <_ZL16currentCharacterv+0x4>
		if (c >= 'A' && c <= 'Z')
		c += 'a' - 'A';
	} while (c == ' ' && (buzzerSequence++));

	return c;
}
 808:	08 95       	ret

0000080a <_ZL9getNumberv>:
static uint16_t getNumber() {
 80a:	cf 93       	push	r28
 80c:	df 93       	push	r29
	uint16_t arg = 0;
	int8_t c = currentCharacter();
 80e:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <_ZL16currentCharacterv>
	while (c >= '0' && c <= '9') {
 812:	90 ed       	ldi	r25, 0xD0	; 208
 814:	98 0f       	add	r25, r24
 816:	9a 30       	cpi	r25, 0x0A	; 10
 818:	10 f5       	brcc	.+68     	; 0x85e <_ZL9getNumberv+0x54>
 81a:	c0 e0       	ldi	r28, 0x00	; 0
 81c:	d0 e0       	ldi	r29, 0x00	; 0
		arg *= 10;
		arg += c - '0';
 81e:	9e 01       	movw	r18, r28
 820:	22 0f       	add	r18, r18
 822:	33 1f       	adc	r19, r19
 824:	cc 0f       	add	r28, r28
 826:	dd 1f       	adc	r29, r29
 828:	cc 0f       	add	r28, r28
 82a:	dd 1f       	adc	r29, r29
 82c:	cc 0f       	add	r28, r28
 82e:	dd 1f       	adc	r29, r29
 830:	c2 0f       	add	r28, r18
 832:	d3 1f       	adc	r29, r19
 834:	c8 0f       	add	r28, r24
 836:	d1 1d       	adc	r29, r1
 838:	87 fd       	sbrc	r24, 7
 83a:	da 95       	dec	r29
 83c:	e0 97       	sbiw	r28, 0x30	; 48
		buzzerSequence++;
 83e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <buzzerSequence>
 842:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <buzzerSequence+0x1>
 846:	01 96       	adiw	r24, 0x01	; 1
 848:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <buzzerSequence+0x1>
 84c:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <buzzerSequence>
		c = currentCharacter();
 850:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <_ZL16currentCharacterv>
	return c;
}
static uint16_t getNumber() {
	uint16_t arg = 0;
	int8_t c = currentCharacter();
	while (c >= '0' && c <= '9') {
 854:	90 ed       	ldi	r25, 0xD0	; 208
 856:	98 0f       	add	r25, r24
 858:	9a 30       	cpi	r25, 0x0A	; 10
 85a:	08 f3       	brcs	.-62     	; 0x81e <_ZL9getNumberv+0x14>
 85c:	02 c0       	rjmp	.+4      	; 0x862 <_ZL9getNumberv+0x58>
	} while (c == ' ' && (buzzerSequence++));

	return c;
}
static uint16_t getNumber() {
	uint16_t arg = 0;
 85e:	c0 e0       	ldi	r28, 0x00	; 0
 860:	d0 e0       	ldi	r29, 0x00	; 0
		buzzerSequence++;
		c = currentCharacter();
	}

	return arg;
}
 862:	ce 01       	movw	r24, r28
 864:	df 91       	pop	r29
 866:	cf 91       	pop	r28
 868:	08 95       	ret

0000086a <_ZN13DanyBotBuzzer5setUpEv>:
			nextNote();
	}
}

void DanyBotBuzzer::setUp() {
	TIMSK2 = 0;
 86a:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
	TCCR2A = 0x21;
 86e:	81 e2       	ldi	r24, 0x21	; 33
 870:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	TCCR2B = 0x0B;
 874:	8b e0       	ldi	r24, 0x0B	; 11
 876:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	OCR2A = (F_CPU / 64) / 1000;
 87a:	8a ef       	ldi	r24, 0xFA	; 250
 87c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	OCR2B = 0;
 880:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
	DDRD |= (1 << PORTD3);
 884:	53 9a       	sbi	0x0a, 3	; 10
	sei();
 886:	78 94       	sei
 888:	08 95       	ret

0000088a <_ZN13DanyBotBuzzer13playFrequencyEjjh>:
}

void DanyBotBuzzer::playFrequency(uint16_t freq, uint16_t dur, uint8_t volume) {
 88a:	2f 92       	push	r2
 88c:	3f 92       	push	r3
 88e:	4f 92       	push	r4
 890:	5f 92       	push	r5
 892:	6f 92       	push	r6
 894:	7f 92       	push	r7
 896:	8f 92       	push	r8
 898:	9f 92       	push	r9
 89a:	af 92       	push	r10
 89c:	bf 92       	push	r11
 89e:	cf 92       	push	r12
 8a0:	df 92       	push	r13
 8a2:	ef 92       	push	r14
 8a4:	ff 92       	push	r15
 8a6:	0f 93       	push	r16
 8a8:	1f 93       	push	r17
 8aa:	cf 93       	push	r28
 8ac:	df 93       	push	r29
 8ae:	00 d0       	rcall	.+0      	; 0x8b0 <_ZN13DanyBotBuzzer13playFrequencyEjjh+0x26>
 8b0:	00 d0       	rcall	.+0      	; 0x8b2 <_ZN13DanyBotBuzzer13playFrequencyEjjh+0x28>
 8b2:	1f 92       	push	r1
 8b4:	cd b7       	in	r28, 0x3d	; 61
 8b6:	de b7       	in	r29, 0x3e	; 62
 8b8:	7a 83       	std	Y+2, r23	; 0x02
 8ba:	69 83       	std	Y+1, r22	; 0x01
 8bc:	4b 83       	std	Y+3, r20	; 0x03
	buzzerFinished = 0;
 8be:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <buzzerFinished>

	uint16_t timeout;
	uint8_t multiplier = 1;

	if (freq & DIV_BY_10) {
 8c2:	99 23       	and	r25, r25
 8c4:	0c f0       	brlt	.+2      	; 0x8c8 <_ZN13DanyBotBuzzer13playFrequencyEjjh+0x3e>
 8c6:	a2 c0       	rjmp	.+324    	; 0xa0c <__stack+0x10d>
 8c8:	1c 01       	movw	r2, r24
 8ca:	e8 94       	clt
 8cc:	37 f8       	bld	r3, 7
 8ce:	20 e9       	ldi	r18, 0x90	; 144
 8d0:	22 16       	cp	r2, r18
 8d2:	31 04       	cpc	r3, r1
 8d4:	28 f4       	brcc	.+10     	; 0x8e0 <_ZN13DanyBotBuzzer13playFrequencyEjjh+0x56>
 8d6:	0f 2e       	mov	r0, r31
 8d8:	f0 e9       	ldi	r31, 0x90	; 144
 8da:	2f 2e       	mov	r2, r31
 8dc:	31 2c       	mov	r3, r1
 8de:	f0 2d       	mov	r31, r0

	uint16_t top;
	uint8_t newCS2 = 2;
	uint16_t divider = cs2_divider[newCS2];

	top = (uint16_t)(((F_CPU / 16 * multiplier) + (freq >> 1)) / freq);
 8e0:	c1 01       	movw	r24, r2
 8e2:	96 95       	lsr	r25
 8e4:	87 95       	ror	r24
 8e6:	2c 01       	movw	r4, r24
 8e8:	61 2c       	mov	r6, r1
 8ea:	71 2c       	mov	r7, r1
 8ec:	61 01       	movw	r12, r2
 8ee:	e1 2c       	mov	r14, r1
 8f0:	f1 2c       	mov	r15, r1
 8f2:	c3 01       	movw	r24, r6
 8f4:	b2 01       	movw	r22, r4
 8f6:	60 58       	subi	r22, 0x80	; 128
 8f8:	79 46       	sbci	r23, 0x69	; 105
 8fa:	87 46       	sbci	r24, 0x67	; 103
 8fc:	9f 4f       	sbci	r25, 0xFF	; 255
 8fe:	a7 01       	movw	r20, r14
 900:	96 01       	movw	r18, r12
 902:	0e 94 9c 07 	call	0xf38	; 0xf38 <__udivmodsi4>
 906:	3d 83       	std	Y+5, r19	; 0x05
 908:	2c 83       	std	Y+4, r18	; 0x04

	while (top > 255) {
 90a:	2f 3f       	cpi	r18, 0xFF	; 255
 90c:	31 05       	cpc	r19, r1
 90e:	81 f1       	breq	.+96     	; 0x970 <__stack+0x71>
 910:	78 f1       	brcs	.+94     	; 0x970 <__stack+0x71>

	uint16_t top;
	uint8_t newCS2 = 2;
	uint16_t divider = cs2_divider[newCS2];

	top = (uint16_t)(((F_CPU / 16 * multiplier) + (freq >> 1)) / freq);
 912:	0f 2e       	mov	r0, r31
 914:	fa e0       	ldi	r31, 0x0A	; 10
 916:	8f 2e       	mov	r8, r31
 918:	91 2c       	mov	r9, r1
 91a:	a1 2c       	mov	r10, r1
 91c:	b1 2c       	mov	r11, r1
 91e:	f0 2d       	mov	r31, r0

	uint16_t timeout;
	uint8_t multiplier = 1;

	if (freq & DIV_BY_10) {
		multiplier = 10;
 920:	0a e0       	ldi	r16, 0x0A	; 10

void DanyBotBuzzer::playFrequency(uint16_t freq, uint16_t dur, uint8_t volume) {
	buzzerFinished = 0;

	uint16_t timeout;
	uint8_t multiplier = 1;
 922:	12 e0       	ldi	r17, 0x02	; 2
	uint16_t divider = cs2_divider[newCS2];

	top = (uint16_t)(((F_CPU / 16 * multiplier) + (freq >> 1)) / freq);

	while (top > 255) {
		divider = cs2_divider[++newCS2];
 924:	1f 5f       	subi	r17, 0xFF	; 255
 926:	e1 2f       	mov	r30, r17
 928:	f0 e0       	ldi	r31, 0x00	; 0
 92a:	ee 0f       	add	r30, r30
 92c:	ff 1f       	adc	r31, r31
 92e:	e6 5f       	subi	r30, 0xF6	; 246
 930:	fe 4f       	sbci	r31, 0xFE	; 254
		top = (uint16_t)(((F_CPU / 2 / divider * multiplier) + (freq >> 1)) / freq);
 932:	20 81       	ld	r18, Z
 934:	31 81       	ldd	r19, Z+1	; 0x01
 936:	40 e0       	ldi	r20, 0x00	; 0
 938:	50 e0       	ldi	r21, 0x00	; 0
 93a:	60 e0       	ldi	r22, 0x00	; 0
 93c:	72 e1       	ldi	r23, 0x12	; 18
 93e:	8a e7       	ldi	r24, 0x7A	; 122
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	0e 94 9c 07 	call	0xf38	; 0xf38 <__udivmodsi4>
 946:	c5 01       	movw	r24, r10
 948:	b4 01       	movw	r22, r8
 94a:	0e 94 78 07 	call	0xef0	; 0xef0 <__mulsi3>
 94e:	64 0d       	add	r22, r4
 950:	75 1d       	adc	r23, r5
 952:	86 1d       	adc	r24, r6
 954:	97 1d       	adc	r25, r7
 956:	a7 01       	movw	r20, r14
 958:	96 01       	movw	r18, r12
 95a:	0e 94 9c 07 	call	0xf38	; 0xf38 <__udivmodsi4>
 95e:	3d 83       	std	Y+5, r19	; 0x05
 960:	2c 83       	std	Y+4, r18	; 0x04
	uint8_t newCS2 = 2;
	uint16_t divider = cs2_divider[newCS2];

	top = (uint16_t)(((F_CPU / 16 * multiplier) + (freq >> 1)) / freq);

	while (top > 255) {
 962:	2f 3f       	cpi	r18, 0xFF	; 255
 964:	31 05       	cpc	r19, r1
 966:	09 f0       	breq	.+2      	; 0x96a <__stack+0x6b>
 968:	e8 f6       	brcc	.-70     	; 0x924 <__stack+0x25>
		divider = cs2_divider[++newCS2];
		top = (uint16_t)(((F_CPU / 2 / divider * multiplier) + (freq >> 1)) / freq);
	}

	if (multiplier == 10)
 96a:	0a 30       	cpi	r16, 0x0A	; 10
 96c:	91 f4       	brne	.+36     	; 0x992 <__stack+0x93>
 96e:	01 c0       	rjmp	.+2      	; 0x972 <__stack+0x73>
		freq = min;
	if (multiplier == 1 && freq > 10000)
		freq = 10000;

	uint16_t top;
	uint8_t newCS2 = 2;
 970:	12 e0       	ldi	r17, 0x02	; 2
		divider = cs2_divider[++newCS2];
		top = (uint16_t)(((F_CPU / 2 / divider * multiplier) + (freq >> 1)) / freq);
	}

	if (multiplier == 10)
		freq = (freq + 5) / 10;
 972:	91 01       	movw	r18, r2
 974:	2b 5f       	subi	r18, 0xFB	; 251
 976:	3f 4f       	sbci	r19, 0xFF	; 255
 978:	ad ec       	ldi	r26, 0xCD	; 205
 97a:	bc ec       	ldi	r27, 0xCC	; 204
 97c:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <__umulhisi3>
 980:	1c 01       	movw	r2, r24
 982:	36 94       	lsr	r3
 984:	27 94       	ror	r2
 986:	36 94       	lsr	r3
 988:	27 94       	ror	r2
 98a:	36 94       	lsr	r3
 98c:	27 94       	ror	r2
 98e:	01 c0       	rjmp	.+2      	; 0x992 <__stack+0x93>
		freq = min;
	if (multiplier == 1 && freq > 10000)
		freq = 10000;

	uint16_t top;
	uint8_t newCS2 = 2;
 990:	12 e0       	ldi	r17, 0x02	; 2
	}

	if (multiplier == 10)
		freq = (freq + 5) / 10;

	if (freq == 1000)
 992:	38 ee       	ldi	r19, 0xE8	; 232
 994:	23 16       	cp	r2, r19
 996:	33 e0       	ldi	r19, 0x03	; 3
 998:	33 06       	cpc	r3, r19
 99a:	69 f0       	breq	.+26     	; 0x9b6 <__stack+0xb7>
		timeout = dur;
	else
		timeout = (uint16_t)((long)dur * freq / 1000);
 99c:	29 81       	ldd	r18, Y+1	; 0x01
 99e:	3a 81       	ldd	r19, Y+2	; 0x02
 9a0:	d1 01       	movw	r26, r2
 9a2:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <__umulhisi3>
 9a6:	28 ee       	ldi	r18, 0xE8	; 232
 9a8:	33 e0       	ldi	r19, 0x03	; 3
 9aa:	40 e0       	ldi	r20, 0x00	; 0
 9ac:	50 e0       	ldi	r21, 0x00	; 0
 9ae:	0e 94 be 07 	call	0xf7c	; 0xf7c <__divmodsi4>
 9b2:	3a 83       	std	Y+2, r19	; 0x02
 9b4:	29 83       	std	Y+1, r18	; 0x01

	if (volume > 15)
		volume = 15;

	TIMSK2 = 0;
 9b6:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>

	TCCR2B = (TCCR2B & 0xF8) | newCS2;
 9ba:	e1 eb       	ldi	r30, 0xB1	; 177
 9bc:	f0 e0       	ldi	r31, 0x00	; 0
 9be:	80 81       	ld	r24, Z
 9c0:	88 7f       	andi	r24, 0xF8	; 248
 9c2:	18 2b       	or	r17, r24
 9c4:	10 83       	st	Z, r17
	OCR2A = top;
 9c6:	8c 81       	ldd	r24, Y+4	; 0x04
 9c8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	OCR2B = top >> (16 - volume);
 9cc:	0b 81       	ldd	r16, Y+3	; 0x03
 9ce:	00 31       	cpi	r16, 0x10	; 16
 9d0:	08 f0       	brcs	.+2      	; 0x9d4 <__stack+0xd5>
 9d2:	0f e0       	ldi	r16, 0x0F	; 15
 9d4:	80 e1       	ldi	r24, 0x10	; 16
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	80 1b       	sub	r24, r16
 9da:	91 09       	sbc	r25, r1
 9dc:	2c 81       	ldd	r18, Y+4	; 0x04
 9de:	3d 81       	ldd	r19, Y+5	; 0x05
 9e0:	02 c0       	rjmp	.+4      	; 0x9e6 <__stack+0xe7>
 9e2:	36 95       	lsr	r19
 9e4:	27 95       	ror	r18
 9e6:	8a 95       	dec	r24
 9e8:	e2 f7       	brpl	.-8      	; 0x9e2 <__stack+0xe3>
 9ea:	3d 83       	std	Y+5, r19	; 0x05
 9ec:	2c 83       	std	Y+4, r18	; 0x04
 9ee:	20 93 b4 00 	sts	0x00B4, r18	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
	buzzerTimeout = timeout;
 9f2:	89 81       	ldd	r24, Y+1	; 0x01
 9f4:	9a 81       	ldd	r25, Y+2	; 0x02
 9f6:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <_ZL13buzzerTimeout+0x1>
 9fa:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <_ZL13buzzerTimeout>

	TIFR2 |= 0xFF;
 9fe:	87 b3       	in	r24, 0x17	; 23
 a00:	8f ef       	ldi	r24, 0xFF	; 255
 a02:	87 bb       	out	0x17, r24	; 23

	TIMSK2 = (1 << TOIE2);
 a04:	81 e0       	ldi	r24, 0x01	; 1
 a06:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
}
 a0a:	31 c0       	rjmp	.+98     	; 0xa6e <__stack+0x16f>
 a0c:	88 32       	cpi	r24, 0x28	; 40
 a0e:	91 05       	cpc	r25, r1
 a10:	10 f4       	brcc	.+4      	; 0xa16 <__stack+0x117>
 a12:	88 e2       	ldi	r24, 0x28	; 40
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	1c 01       	movw	r2, r24
 a18:	91 e1       	ldi	r25, 0x11	; 17
 a1a:	29 16       	cp	r2, r25
 a1c:	97 e2       	ldi	r25, 0x27	; 39
 a1e:	39 06       	cpc	r3, r25
 a20:	30 f0       	brcs	.+12     	; 0xa2e <__stack+0x12f>
 a22:	0f 2e       	mov	r0, r31
 a24:	f0 e1       	ldi	r31, 0x10	; 16
 a26:	2f 2e       	mov	r2, r31
 a28:	f7 e2       	ldi	r31, 0x27	; 39
 a2a:	3f 2e       	mov	r3, r31
 a2c:	f0 2d       	mov	r31, r0

	uint16_t top;
	uint8_t newCS2 = 2;
	uint16_t divider = cs2_divider[newCS2];

	top = (uint16_t)(((F_CPU / 16 * multiplier) + (freq >> 1)) / freq);
 a2e:	c1 01       	movw	r24, r2
 a30:	96 95       	lsr	r25
 a32:	87 95       	ror	r24
 a34:	2c 01       	movw	r4, r24
 a36:	61 2c       	mov	r6, r1
 a38:	71 2c       	mov	r7, r1
 a3a:	61 01       	movw	r12, r2
 a3c:	e1 2c       	mov	r14, r1
 a3e:	f1 2c       	mov	r15, r1
 a40:	c3 01       	movw	r24, r6
 a42:	b2 01       	movw	r22, r4
 a44:	60 5c       	subi	r22, 0xC0	; 192
 a46:	7d 4b       	sbci	r23, 0xBD	; 189
 a48:	80 4f       	sbci	r24, 0xF0	; 240
 a4a:	9f 4f       	sbci	r25, 0xFF	; 255
 a4c:	a7 01       	movw	r20, r14
 a4e:	96 01       	movw	r18, r12
 a50:	0e 94 9c 07 	call	0xf38	; 0xf38 <__udivmodsi4>
 a54:	3d 83       	std	Y+5, r19	; 0x05
 a56:	2c 83       	std	Y+4, r18	; 0x04

	while (top > 255) {
 a58:	2f 3f       	cpi	r18, 0xFF	; 255
 a5a:	31 05       	cpc	r19, r1
 a5c:	09 f0       	breq	.+2      	; 0xa60 <__stack+0x161>
 a5e:	08 f4       	brcc	.+2      	; 0xa62 <__stack+0x163>
 a60:	97 cf       	rjmp	.-210    	; 0x990 <__stack+0x91>

	uint16_t top;
	uint8_t newCS2 = 2;
	uint16_t divider = cs2_divider[newCS2];

	top = (uint16_t)(((F_CPU / 16 * multiplier) + (freq >> 1)) / freq);
 a62:	81 2c       	mov	r8, r1
 a64:	91 2c       	mov	r9, r1
 a66:	54 01       	movw	r10, r8
 a68:	83 94       	inc	r8

void DanyBotBuzzer::playFrequency(uint16_t freq, uint16_t dur, uint8_t volume) {
	buzzerFinished = 0;

	uint16_t timeout;
	uint8_t multiplier = 1;
 a6a:	01 e0       	ldi	r16, 0x01	; 1
 a6c:	5a cf       	rjmp	.-332    	; 0x922 <__stack+0x23>
	buzzerTimeout = timeout;

	TIFR2 |= 0xFF;

	TIMSK2 = (1 << TOIE2);
}
 a6e:	0f 90       	pop	r0
 a70:	0f 90       	pop	r0
 a72:	0f 90       	pop	r0
 a74:	0f 90       	pop	r0
 a76:	0f 90       	pop	r0
 a78:	df 91       	pop	r29
 a7a:	cf 91       	pop	r28
 a7c:	1f 91       	pop	r17
 a7e:	0f 91       	pop	r16
 a80:	ff 90       	pop	r15
 a82:	ef 90       	pop	r14
 a84:	df 90       	pop	r13
 a86:	cf 90       	pop	r12
 a88:	bf 90       	pop	r11
 a8a:	af 90       	pop	r10
 a8c:	9f 90       	pop	r9
 a8e:	8f 90       	pop	r8
 a90:	7f 90       	pop	r7
 a92:	6f 90       	pop	r6
 a94:	5f 90       	pop	r5
 a96:	4f 90       	pop	r4
 a98:	3f 90       	pop	r3
 a9a:	2f 90       	pop	r2
 a9c:	08 95       	ret

00000a9e <_ZN13DanyBotBuzzer8playNoteEhjh>:
void DanyBotBuzzer::playNote(uint8_t note, uint16_t dur, uint8_t volume) {
 a9e:	cf 93       	push	r28
 aa0:	df 93       	push	r29
 aa2:	eb 01       	movw	r28, r22
	uint16_t freq = 0;
	uint8_t offset_note = note - 16;

	if (note == SILENT_NOTE || volume == 0) {
 aa4:	8f 3f       	cpi	r24, 0xFF	; 255
 aa6:	11 f0       	breq	.+4      	; 0xaac <_ZN13DanyBotBuzzer8playNoteEhjh+0xe>
 aa8:	41 11       	cpse	r20, r1
 aaa:	07 c0       	rjmp	.+14     	; 0xaba <_ZN13DanyBotBuzzer8playNoteEhjh+0x1c>
		freq = 1000;
		DanyBotBuzzer::playFrequency(freq, dur, 0);
 aac:	40 e0       	ldi	r20, 0x00	; 0
 aae:	be 01       	movw	r22, r28
 ab0:	88 ee       	ldi	r24, 0xE8	; 232
 ab2:	93 e0       	ldi	r25, 0x03	; 3
 ab4:	0e 94 45 04 	call	0x88a	; 0x88a <_ZN13DanyBotBuzzer13playFrequencyEjjh>
		return;
 ab8:	78 c0       	rjmp	.+240    	; 0xbaa <_ZN13DanyBotBuzzer8playNoteEhjh+0x10c>
	}

	if (note <= 16)
 aba:	81 31       	cpi	r24, 0x11	; 17
 abc:	e8 f0       	brcs	.+58     	; 0xaf8 <_ZN13DanyBotBuzzer8playNoteEhjh+0x5a>

	TIMSK2 = (1 << TOIE2);
}
void DanyBotBuzzer::playNote(uint8_t note, uint16_t dur, uint8_t volume) {
	uint16_t freq = 0;
	uint8_t offset_note = note - 16;
 abe:	80 51       	subi	r24, 0x10	; 16
 ac0:	80 36       	cpi	r24, 0x60	; 96
 ac2:	08 f0       	brcs	.+2      	; 0xac6 <_ZN13DanyBotBuzzer8playNoteEhjh+0x28>
 ac4:	8f e5       	ldi	r24, 0x5F	; 95
	if (note <= 16)
	offset_note = 0;
	else if (offset_note > 95)
	offset_note = 95;

	uint8_t exponent = offset_note / 12;
 ac6:	2b ea       	ldi	r18, 0xAB	; 171
 ac8:	82 9f       	mul	r24, r18
 aca:	21 2d       	mov	r18, r1
 acc:	11 24       	eor	r1, r1
 ace:	26 95       	lsr	r18
 ad0:	26 95       	lsr	r18
 ad2:	26 95       	lsr	r18

	switch (offset_note - exponent * 12) {
 ad4:	62 2f       	mov	r22, r18
 ad6:	e8 2f       	mov	r30, r24
 ad8:	f0 e0       	ldi	r31, 0x00	; 0
 ada:	8c e0       	ldi	r24, 0x0C	; 12
 adc:	28 9f       	mul	r18, r24
 ade:	e0 19       	sub	r30, r0
 ae0:	f1 09       	sbc	r31, r1
 ae2:	11 24       	eor	r1, r1
 ae4:	ec 30       	cpi	r30, 0x0C	; 12
 ae6:	f1 05       	cpc	r31, r1
 ae8:	58 f5       	brcc	.+86     	; 0xb40 <_ZN13DanyBotBuzzer8playNoteEhjh+0xa2>
 aea:	ec 5c       	subi	r30, 0xCC	; 204
 aec:	ff 4f       	sbci	r31, 0xFF	; 255
 aee:	0c 94 dd 07 	jmp	0xfba	; 0xfba <__tablejump2__>
		case 0:
		freq = 412;
		break;
		
		case 1:
		freq = 437;
 af2:	85 eb       	ldi	r24, 0xB5	; 181
 af4:	91 e0       	ldi	r25, 0x01	; 1
 af6:	26 c0       	rjmp	.+76     	; 0xb44 <_ZN13DanyBotBuzzer8playNoteEhjh+0xa6>
	else if (offset_note > 95)
	offset_note = 95;

	uint8_t exponent = offset_note / 12;

	switch (offset_note - exponent * 12) {
 af8:	60 e0       	ldi	r22, 0x00	; 0
 afa:	70 e0       	ldi	r23, 0x00	; 0
	if (note <= 16)
	offset_note = 0;
	else if (offset_note > 95)
	offset_note = 95;

	uint8_t exponent = offset_note / 12;
 afc:	20 e0       	ldi	r18, 0x00	; 0

	switch (offset_note - exponent * 12) {
		case 0:
		freq = 412;
 afe:	8c e9       	ldi	r24, 0x9C	; 156
 b00:	91 e0       	ldi	r25, 0x01	; 1
		break;
 b02:	20 c0       	rjmp	.+64     	; 0xb44 <_ZN13DanyBotBuzzer8playNoteEhjh+0xa6>
		case 1:
		freq = 437;
		break;
		
		case 2:
		freq = 463;
 b04:	8f ec       	ldi	r24, 0xCF	; 207
 b06:	91 e0       	ldi	r25, 0x01	; 1
		break;
 b08:	1d c0       	rjmp	.+58     	; 0xb44 <_ZN13DanyBotBuzzer8playNoteEhjh+0xa6>
		
		case 3:
		freq = 490;
 b0a:	8a ee       	ldi	r24, 0xEA	; 234
 b0c:	91 e0       	ldi	r25, 0x01	; 1
		break;
 b0e:	1a c0       	rjmp	.+52     	; 0xb44 <_ZN13DanyBotBuzzer8playNoteEhjh+0xa6>
		
		case 4:
		freq = 519;
 b10:	87 e0       	ldi	r24, 0x07	; 7
 b12:	92 e0       	ldi	r25, 0x02	; 2
		break;
 b14:	17 c0       	rjmp	.+46     	; 0xb44 <_ZN13DanyBotBuzzer8playNoteEhjh+0xa6>
		
		case 5:
		freq = 550;
 b16:	86 e2       	ldi	r24, 0x26	; 38
 b18:	92 e0       	ldi	r25, 0x02	; 2
		break;
 b1a:	14 c0       	rjmp	.+40     	; 0xb44 <_ZN13DanyBotBuzzer8playNoteEhjh+0xa6>
		
		case 6:
		freq = 583;
 b1c:	87 e4       	ldi	r24, 0x47	; 71
 b1e:	92 e0       	ldi	r25, 0x02	; 2
		break;
 b20:	11 c0       	rjmp	.+34     	; 0xb44 <_ZN13DanyBotBuzzer8playNoteEhjh+0xa6>
		
		case 7:
		freq = 617;
 b22:	89 e6       	ldi	r24, 0x69	; 105
 b24:	92 e0       	ldi	r25, 0x02	; 2
		break;
 b26:	0e c0       	rjmp	.+28     	; 0xb44 <_ZN13DanyBotBuzzer8playNoteEhjh+0xa6>
		
		case 8:
		freq = 654;
 b28:	8e e8       	ldi	r24, 0x8E	; 142
 b2a:	92 e0       	ldi	r25, 0x02	; 2
		break;
 b2c:	0b c0       	rjmp	.+22     	; 0xb44 <_ZN13DanyBotBuzzer8playNoteEhjh+0xa6>
		
		case 9:
		freq = 693;
 b2e:	85 eb       	ldi	r24, 0xB5	; 181
 b30:	92 e0       	ldi	r25, 0x02	; 2
		break;
 b32:	08 c0       	rjmp	.+16     	; 0xb44 <_ZN13DanyBotBuzzer8playNoteEhjh+0xa6>
		
		case 10:
		freq = 734;
 b34:	8e ed       	ldi	r24, 0xDE	; 222
 b36:	92 e0       	ldi	r25, 0x02	; 2
		break;
 b38:	05 c0       	rjmp	.+10     	; 0xb44 <_ZN13DanyBotBuzzer8playNoteEhjh+0xa6>
		
		case 11:
		freq = 778;
 b3a:	8a e0       	ldi	r24, 0x0A	; 10
 b3c:	93 e0       	ldi	r25, 0x03	; 3
		break;
 b3e:	02 c0       	rjmp	.+4      	; 0xb44 <_ZN13DanyBotBuzzer8playNoteEhjh+0xa6>
	TIFR2 |= 0xFF;

	TIMSK2 = (1 << TOIE2);
}
void DanyBotBuzzer::playNote(uint8_t note, uint16_t dur, uint8_t volume) {
	uint16_t freq = 0;
 b40:	80 e0       	ldi	r24, 0x00	; 0
 b42:	90 e0       	ldi	r25, 0x00	; 0
		case 11:
		freq = 778;
		break;
	}

	if (exponent < 7) {
 b44:	27 30       	cpi	r18, 0x07	; 7
 b46:	b8 f4       	brcc	.+46     	; 0xb76 <_ZN13DanyBotBuzzer8playNoteEhjh+0xd8>
		freq = freq << exponent;
 b48:	02 c0       	rjmp	.+4      	; 0xb4e <_ZN13DanyBotBuzzer8playNoteEhjh+0xb0>
 b4a:	88 0f       	add	r24, r24
 b4c:	99 1f       	adc	r25, r25
 b4e:	6a 95       	dec	r22
 b50:	e2 f7       	brpl	.-8      	; 0xb4a <_ZN13DanyBotBuzzer8playNoteEhjh+0xac>
		if (exponent > 1)
 b52:	22 30       	cpi	r18, 0x02	; 2
 b54:	70 f0       	brcs	.+28     	; 0xb72 <_ZN13DanyBotBuzzer8playNoteEhjh+0xd4>
			freq = (freq + 5) / 10;
 b56:	9c 01       	movw	r18, r24
 b58:	2b 5f       	subi	r18, 0xFB	; 251
 b5a:	3f 4f       	sbci	r19, 0xFF	; 255
 b5c:	ad ec       	ldi	r26, 0xCD	; 205
 b5e:	bc ec       	ldi	r27, 0xCC	; 204
 b60:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <__umulhisi3>
 b64:	96 95       	lsr	r25
 b66:	87 95       	ror	r24
 b68:	96 95       	lsr	r25
 b6a:	87 95       	ror	r24
 b6c:	96 95       	lsr	r25
 b6e:	87 95       	ror	r24
 b70:	16 c0       	rjmp	.+44     	; 0xb9e <_ZN13DanyBotBuzzer8playNoteEhjh+0x100>
		else
			freq += DIV_BY_10;
 b72:	90 58       	subi	r25, 0x80	; 128
 b74:	14 c0       	rjmp	.+40     	; 0xb9e <_ZN13DanyBotBuzzer8playNoteEhjh+0x100>
	}
	else
		freq = (freq * 64 + 2) / 5;
 b76:	00 24       	eor	r0, r0
 b78:	96 95       	lsr	r25
 b7a:	87 95       	ror	r24
 b7c:	07 94       	ror	r0
 b7e:	96 95       	lsr	r25
 b80:	87 95       	ror	r24
 b82:	07 94       	ror	r0
 b84:	98 2f       	mov	r25, r24
 b86:	80 2d       	mov	r24, r0
 b88:	9c 01       	movw	r18, r24
 b8a:	2e 5f       	subi	r18, 0xFE	; 254
 b8c:	3f 4f       	sbci	r19, 0xFF	; 255
 b8e:	ad ec       	ldi	r26, 0xCD	; 205
 b90:	bc ec       	ldi	r27, 0xCC	; 204
 b92:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <__umulhisi3>
 b96:	96 95       	lsr	r25
 b98:	87 95       	ror	r24
 b9a:	96 95       	lsr	r25
 b9c:	87 95       	ror	r24

	if (volume > 15)
		volume = 15;
	playFrequency(freq, dur, volume);
 b9e:	40 31       	cpi	r20, 0x10	; 16
 ba0:	08 f0       	brcs	.+2      	; 0xba4 <_ZN13DanyBotBuzzer8playNoteEhjh+0x106>
 ba2:	4f e0       	ldi	r20, 0x0F	; 15
 ba4:	be 01       	movw	r22, r28
 ba6:	0e 94 45 04 	call	0x88a	; 0x88a <_ZN13DanyBotBuzzer13playFrequencyEjjh>
}
 baa:	df 91       	pop	r29
 bac:	cf 91       	pop	r28
 bae:	08 95       	ret

00000bb0 <_ZL8nextNotev>:
		c = currentCharacter();
	}

	return arg;
}
static void nextNote() {
 bb0:	7f 92       	push	r7
 bb2:	8f 92       	push	r8
 bb4:	9f 92       	push	r9
 bb6:	af 92       	push	r10
 bb8:	bf 92       	push	r11
 bba:	cf 92       	push	r12
 bbc:	df 92       	push	r13
 bbe:	ef 92       	push	r14
 bc0:	ff 92       	push	r15
 bc2:	0f 93       	push	r16
 bc4:	1f 93       	push	r17
 bc6:	cf 93       	push	r28
 bc8:	df 93       	push	r29
	uint8_t note = 0;
	uint8_t rest = 0;
	uint8_t tmp_octave = octave;
 bca:	90 90 08 01 	lds	r9, 0x0108	; 0x800108 <_ZL6octave>
	uint16_t tmp_duration;
	uint16_t dot_add;

	int8_t c;

	if (staccato && staccato_rest_duration) {
 bce:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <_ZL8staccato>
 bd2:	88 23       	and	r24, r24
 bd4:	61 f0       	breq	.+24     	; 0xbee <_ZL8nextNotev+0x3e>
 bd6:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <_ZL22staccato_rest_duration>
 bda:	66 23       	and	r22, r22
 bdc:	41 f0       	breq	.+16     	; 0xbee <_ZL8nextNotev+0x3e>
		DanyBotBuzzer::playNote(SILENT_NOTE, staccato_rest_duration, 0);
 bde:	70 e0       	ldi	r23, 0x00	; 0
 be0:	40 e0       	ldi	r20, 0x00	; 0
 be2:	8f ef       	ldi	r24, 0xFF	; 255
 be4:	0e 94 4f 05 	call	0xa9e	; 0xa9e <_ZN13DanyBotBuzzer8playNoteEhjh>
		staccato_rest_duration = 0;
 be8:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <_ZL22staccato_rest_duration>
		return;
 bec:	27 c1       	rjmp	.+590    	; 0xe3c <_ZL8nextNotev+0x28c>
		case 'v':
		volume = getNumber();
		goto parse_character;
		
		case '!':
		octave = 4;
 bee:	68 94       	set
 bf0:	88 24       	eor	r8, r8
 bf2:	82 f8       	bld	r8, 2
		whole_note_duration = 2000;
 bf4:	0f 2e       	mov	r0, r31
 bf6:	f0 ed       	ldi	r31, 0xD0	; 208
 bf8:	af 2e       	mov	r10, r31
 bfa:	f7 e0       	ldi	r31, 0x07	; 7
 bfc:	bf 2e       	mov	r11, r31
 bfe:	f0 2d       	mov	r31, r0
		note_type = 4;
 c00:	68 94       	set
 c02:	cc 24       	eor	r12, r12
 c04:	c2 f8       	bld	r12, 2
 c06:	d1 2c       	mov	r13, r1
		duration = 500;
 c08:	0f 2e       	mov	r0, r31
 c0a:	f4 ef       	ldi	r31, 0xF4	; 244
 c0c:	ef 2e       	mov	r14, r31
 c0e:	ff 24       	eor	r15, r15
 c10:	f3 94       	inc	r15
 c12:	f0 2d       	mov	r31, r0
		volume = 15;
 c14:	cf e0       	ldi	r28, 0x0F	; 15
 c16:	d0 e0       	ldi	r29, 0x00	; 0
		case 'r':
		rest = 1;
		break;
		
		case 't':
		whole_note_duration = 60 * 400 / getNumber() * 10;
 c18:	00 ec       	ldi	r16, 0xC0	; 192
 c1a:	1d e5       	ldi	r17, 0x5D	; 93
		
		case 'm':
		if (currentCharacter() == 'l')
			staccato = false;
		else {
			staccato = true;
 c1c:	77 24       	eor	r7, r7
 c1e:	73 94       	inc	r7
		return;
	}

	parse_character:

	c = currentCharacter();
 c20:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <_ZL16currentCharacterv>
 c24:	e8 2f       	mov	r30, r24
	buzzerSequence++;
 c26:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <buzzerSequence>
 c2a:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <buzzerSequence+0x1>
 c2e:	01 96       	adiw	r24, 0x01	; 1
 c30:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <buzzerSequence+0x1>
 c34:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <buzzerSequence>

	switch (c) {
 c38:	8e 2f       	mov	r24, r30
 c3a:	ee 0f       	add	r30, r30
 c3c:	99 0b       	sbc	r25, r25
 c3e:	aa 0b       	sbc	r26, r26
 c40:	bb 0b       	sbc	r27, r27
 c42:	fc 01       	movw	r30, r24
 c44:	b1 97       	sbiw	r30, 0x21	; 33
 c46:	e6 35       	cpi	r30, 0x56	; 86
 c48:	f1 05       	cpc	r31, r1
 c4a:	08 f0       	brcs	.+2      	; 0xc4e <_ZL8nextNotev+0x9e>
 c4c:	86 c0       	rjmp	.+268    	; 0xd5a <_ZL8nextNotev+0x1aa>
 c4e:	e0 5c       	subi	r30, 0xC0	; 192
 c50:	ff 4f       	sbci	r31, 0xFF	; 255
 c52:	0c 94 dd 07 	jmp	0xfba	; 0xfba <__tablejump2__>

	return arg;
}
static void nextNote() {
	uint8_t note = 0;
	uint8_t rest = 0;
 c56:	d0 e0       	ldi	r29, 0x00	; 0
		case 'a':
		note = NOTE_A(0);
		break;
		
		case 'b':
		note = NOTE_B(0);
 c58:	cb e0       	ldi	r28, 0x0B	; 11
 c5a:	89 c0       	rjmp	.+274    	; 0xd6e <_ZL8nextNotev+0x1be>
	c = currentCharacter();
	buzzerSequence++;

	switch (c) {
		case '>':
		tmp_octave++;
 c5c:	93 94       	inc	r9
		goto parse_character;
 c5e:	e0 cf       	rjmp	.-64     	; 0xc20 <_ZL8nextNotev+0x70>
		
		case '<':
		tmp_octave--;
 c60:	9a 94       	dec	r9
		goto parse_character;
 c62:	de cf       	rjmp	.-68     	; 0xc20 <_ZL8nextNotev+0x70>

	return arg;
}
static void nextNote() {
	uint8_t note = 0;
	uint8_t rest = 0;
 c64:	d0 e0       	ldi	r29, 0x00	; 0
		case 'c':
		note = NOTE_C(0);
		break;
		
		case 'd':
		note = NOTE_D(0);
 c66:	c2 e0       	ldi	r28, 0x02	; 2
		break;
 c68:	82 c0       	rjmp	.+260    	; 0xd6e <_ZL8nextNotev+0x1be>

	return arg;
}
static void nextNote() {
	uint8_t note = 0;
	uint8_t rest = 0;
 c6a:	d0 e0       	ldi	r29, 0x00	; 0
		case 'd':
		note = NOTE_D(0);
		break;
		
		case 'e':
		note = NOTE_E(0);
 c6c:	c4 e0       	ldi	r28, 0x04	; 4
		break;
 c6e:	7f c0       	rjmp	.+254    	; 0xd6e <_ZL8nextNotev+0x1be>

	return arg;
}
static void nextNote() {
	uint8_t note = 0;
	uint8_t rest = 0;
 c70:	d0 e0       	ldi	r29, 0x00	; 0
		case 'e':
		note = NOTE_E(0);
		break;
		
		case 'f':
		note = NOTE_F(0);
 c72:	c5 e0       	ldi	r28, 0x05	; 5
		break;
 c74:	7c c0       	rjmp	.+248    	; 0xd6e <_ZL8nextNotev+0x1be>

	return arg;
}
static void nextNote() {
	uint8_t note = 0;
	uint8_t rest = 0;
 c76:	d0 e0       	ldi	r29, 0x00	; 0
		case 'f':
		note = NOTE_F(0);
		break;
		
		case 'g':
		note = NOTE_G(0);
 c78:	c7 e0       	ldi	r28, 0x07	; 7
		break;
 c7a:	79 c0       	rjmp	.+242    	; 0xd6e <_ZL8nextNotev+0x1be>
		
		case 'l':
		note_type = getNumber();
 c7c:	0e 94 05 04 	call	0x80a	; 0x80a <_ZL9getNumberv>
 c80:	bc 01       	movw	r22, r24
 c82:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <_ZL9note_type+0x1>
 c86:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_ZL9note_type>
		duration = whole_note_duration / note_type;
 c8a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL19whole_note_duration>
 c8e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL19whole_note_duration+0x1>
 c92:	0e 94 88 07 	call	0xf10	; 0xf10 <__udivmodhi4>
 c96:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <_ZL8duration+0x1>
 c9a:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <_ZL8duration>
		goto parse_character;
 c9e:	c0 cf       	rjmp	.-128    	; 0xc20 <_ZL8nextNotev+0x70>
		
		case 'm':
		if (currentCharacter() == 'l')
 ca0:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <_ZL16currentCharacterv>
 ca4:	8c 36       	cpi	r24, 0x6C	; 108
 ca6:	19 f4       	brne	.+6      	; 0xcae <_ZL8nextNotev+0xfe>
			staccato = false;
 ca8:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <_ZL8staccato>
 cac:	04 c0       	rjmp	.+8      	; 0xcb6 <_ZL8nextNotev+0x106>
		else {
			staccato = true;
 cae:	70 92 2b 01 	sts	0x012B, r7	; 0x80012b <_ZL8staccato>
			staccato_rest_duration = 0;
 cb2:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <_ZL22staccato_rest_duration>
		}
		buzzerSequence++;
 cb6:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <buzzerSequence>
 cba:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <buzzerSequence+0x1>
 cbe:	01 96       	adiw	r24, 0x01	; 1
 cc0:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <buzzerSequence+0x1>
 cc4:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <buzzerSequence>
		goto parse_character;
 cc8:	ab cf       	rjmp	.-170    	; 0xc20 <_ZL8nextNotev+0x70>
		
		case 'o':
		octave = getNumber();
 cca:	0e 94 05 04 	call	0x80a	; 0x80a <_ZL9getNumberv>
 cce:	98 2e       	mov	r9, r24
 cd0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZL6octave>
		tmp_octave = octave;
		goto parse_character;
 cd4:	a5 cf       	rjmp	.-182    	; 0xc20 <_ZL8nextNotev+0x70>
		
		case 'r':
		rest = 1;
 cd6:	d1 e0       	ldi	r29, 0x01	; 1
	}

	return arg;
}
static void nextNote() {
	uint8_t note = 0;
 cd8:	c0 e0       	ldi	r28, 0x00	; 0
		tmp_octave = octave;
		goto parse_character;
		
		case 'r':
		rest = 1;
		break;
 cda:	49 c0       	rjmp	.+146    	; 0xd6e <_ZL8nextNotev+0x1be>
		
		case 't':
		whole_note_duration = 60 * 400 / getNumber() * 10;
 cdc:	0e 94 05 04 	call	0x80a	; 0x80a <_ZL9getNumberv>
 ce0:	bc 01       	movw	r22, r24
 ce2:	c8 01       	movw	r24, r16
 ce4:	0e 94 88 07 	call	0xf10	; 0xf10 <__udivmodhi4>
 ce8:	cb 01       	movw	r24, r22
 cea:	88 0f       	add	r24, r24
 cec:	99 1f       	adc	r25, r25
 cee:	66 0f       	add	r22, r22
 cf0:	77 1f       	adc	r23, r23
 cf2:	66 0f       	add	r22, r22
 cf4:	77 1f       	adc	r23, r23
 cf6:	66 0f       	add	r22, r22
 cf8:	77 1f       	adc	r23, r23
 cfa:	86 0f       	add	r24, r22
 cfc:	97 1f       	adc	r25, r23
 cfe:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL19whole_note_duration+0x1>
 d02:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL19whole_note_duration>
		duration = whole_note_duration / note_type;
 d06:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <_ZL9note_type>
 d0a:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <_ZL9note_type+0x1>
 d0e:	0e 94 88 07 	call	0xf10	; 0xf10 <__udivmodhi4>
 d12:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <_ZL8duration+0x1>
 d16:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <_ZL8duration>
		goto parse_character;
 d1a:	82 cf       	rjmp	.-252    	; 0xc20 <_ZL8nextNotev+0x70>
		
		case 'v':
		volume = getNumber();
 d1c:	0e 94 05 04 	call	0x80a	; 0x80a <_ZL9getNumberv>
 d20:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 d24:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		goto parse_character;
 d28:	7b cf       	rjmp	.-266    	; 0xc20 <_ZL8nextNotev+0x70>
		
		case '!':
		octave = 4;
 d2a:	80 92 08 01 	sts	0x0108, r8	; 0x800108 <_ZL6octave>
		whole_note_duration = 2000;
 d2e:	b0 92 07 01 	sts	0x0107, r11	; 0x800107 <_ZL19whole_note_duration+0x1>
 d32:	a0 92 06 01 	sts	0x0106, r10	; 0x800106 <_ZL19whole_note_duration>
		note_type = 4;
 d36:	d0 92 05 01 	sts	0x0105, r13	; 0x800105 <_ZL9note_type+0x1>
 d3a:	c0 92 04 01 	sts	0x0104, r12	; 0x800104 <_ZL9note_type>
		duration = 500;
 d3e:	f0 92 03 01 	sts	0x0103, r15	; 0x800103 <_ZL8duration+0x1>
 d42:	e0 92 02 01 	sts	0x0102, r14	; 0x800102 <_ZL8duration>
		volume = 15;
 d46:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_start+0x1>
 d4a:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
		staccato = 0;
 d4e:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <_ZL8staccato>
		tmp_octave = octave;
 d52:	68 94       	set
 d54:	99 24       	eor	r9, r9
 d56:	92 f8       	bld	r9, 2
		tmp_duration = duration;
		goto parse_character;
 d58:	63 cf       	rjmp	.-314    	; 0xc20 <_ZL8nextNotev+0x70>
		
		default:
		buzzerSequence = 0;
 d5a:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <buzzerSequence+0x1>
 d5e:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <buzzerSequence>
		return;
 d62:	6c c0       	rjmp	.+216    	; 0xe3c <_ZL8nextNotev+0x28c>

	return arg;
}
static void nextNote() {
	uint8_t note = 0;
	uint8_t rest = 0;
 d64:	d0 e0       	ldi	r29, 0x00	; 0
		case '<':
		tmp_octave--;
		goto parse_character;
		
		case 'a':
		note = NOTE_A(0);
 d66:	c9 e0       	ldi	r28, 0x09	; 9
 d68:	02 c0       	rjmp	.+4      	; 0xd6e <_ZL8nextNotev+0x1be>

	return arg;
}
static void nextNote() {
	uint8_t note = 0;
	uint8_t rest = 0;
 d6a:	d0 e0       	ldi	r29, 0x00	; 0
		case 'b':
		note = NOTE_B(0);
		break;
		
		case 'c':
		note = NOTE_C(0);
 d6c:	c0 e0       	ldi	r28, 0x00	; 0
		default:
		buzzerSequence = 0;
		return;
	}

	note += tmp_octave * 12;
 d6e:	99 2d       	mov	r25, r9
 d70:	99 0f       	add	r25, r25
 d72:	99 0e       	add	r9, r25
 d74:	99 0c       	add	r9, r9
 d76:	99 0c       	add	r9, r9
 d78:	c9 0d       	add	r28, r9

	c = currentCharacter();
 d7a:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <_ZL16currentCharacterv>
	while (c == '+' || c == '#') {
 d7e:	98 2f       	mov	r25, r24
 d80:	97 7f       	andi	r25, 0xF7	; 247
 d82:	93 32       	cpi	r25, 0x23	; 35
 d84:	19 f0       	breq	.+6      	; 0xd8c <_ZL8nextNotev+0x1dc>
		buzzerSequence++;
		note++;
		c = currentCharacter();
	}
	while (c == '-') {
 d86:	8d 32       	cpi	r24, 0x2D	; 45
 d88:	71 f0       	breq	.+28     	; 0xda6 <_ZL8nextNotev+0x1f6>
 d8a:	1b c0       	rjmp	.+54     	; 0xdc2 <_ZL8nextNotev+0x212>

	note += tmp_octave * 12;

	c = currentCharacter();
	while (c == '+' || c == '#') {
		buzzerSequence++;
 d8c:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <buzzerSequence>
 d90:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <buzzerSequence+0x1>
 d94:	01 96       	adiw	r24, 0x01	; 1
 d96:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <buzzerSequence+0x1>
 d9a:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <buzzerSequence>
		note++;
 d9e:	cf 5f       	subi	r28, 0xFF	; 255
		c = currentCharacter();
 da0:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <_ZL16currentCharacterv>
	}

	note += tmp_octave * 12;

	c = currentCharacter();
	while (c == '+' || c == '#') {
 da4:	ec cf       	rjmp	.-40     	; 0xd7e <_ZL8nextNotev+0x1ce>
		buzzerSequence++;
		note++;
		c = currentCharacter();
	}
	while (c == '-') {
		buzzerSequence++;
 da6:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <buzzerSequence>
 daa:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <buzzerSequence+0x1>
 dae:	01 96       	adiw	r24, 0x01	; 1
 db0:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <buzzerSequence+0x1>
 db4:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <buzzerSequence>
		note--;
 db8:	c1 50       	subi	r28, 0x01	; 1
		c = currentCharacter();
 dba:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <_ZL16currentCharacterv>
	while (c == '+' || c == '#') {
		buzzerSequence++;
		note++;
		c = currentCharacter();
	}
	while (c == '-') {
 dbe:	8d 32       	cpi	r24, 0x2D	; 45
 dc0:	91 f3       	breq	.-28     	; 0xda6 <_ZL8nextNotev+0x1f6>
		c = currentCharacter();
	}


	tmp_duration = duration;
	if (c > '0' && c < '9')
 dc2:	81 53       	subi	r24, 0x31	; 49
 dc4:	88 30       	cpi	r24, 0x08	; 8
 dc6:	28 f0       	brcs	.+10     	; 0xdd2 <_ZL8nextNotev+0x222>
		note--;
		c = currentCharacter();
	}


	tmp_duration = duration;
 dc8:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <_ZL8duration>
 dcc:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <_ZL8duration+0x1>
 dd0:	0b c0       	rjmp	.+22     	; 0xde8 <_ZL8nextNotev+0x238>
	if (c > '0' && c < '9')
		tmp_duration = whole_note_duration / getNumber();
 dd2:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <_ZL19whole_note_duration>
 dd6:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <_ZL19whole_note_duration+0x1>
 dda:	0e 94 05 04 	call	0x80a	; 0x80a <_ZL9getNumberv>
 dde:	bc 01       	movw	r22, r24
 de0:	c8 01       	movw	r24, r16
 de2:	0e 94 88 07 	call	0xf10	; 0xf10 <__udivmodhi4>
 de6:	7b 01       	movw	r14, r22

	dot_add = tmp_duration / 2;
 de8:	87 01       	movw	r16, r14
 dea:	16 95       	lsr	r17
 dec:	07 95       	ror	r16
	while (currentCharacter() == '.') {
 dee:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <_ZL16currentCharacterv>
 df2:	8e 32       	cpi	r24, 0x2E	; 46
 df4:	71 f4       	brne	.+28     	; 0xe12 <_ZL8nextNotev+0x262>
		buzzerSequence++;
 df6:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <buzzerSequence>
 dfa:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <buzzerSequence+0x1>
 dfe:	01 96       	adiw	r24, 0x01	; 1
 e00:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <buzzerSequence+0x1>
 e04:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <buzzerSequence>
		tmp_duration += dot_add;
 e08:	e0 0e       	add	r14, r16
 e0a:	f1 1e       	adc	r15, r17
		dot_add /= 2;
 e0c:	16 95       	lsr	r17
 e0e:	07 95       	ror	r16
	tmp_duration = duration;
	if (c > '0' && c < '9')
		tmp_duration = whole_note_duration / getNumber();

	dot_add = tmp_duration / 2;
	while (currentCharacter() == '.') {
 e10:	ee cf       	rjmp	.-36     	; 0xdee <_ZL8nextNotev+0x23e>
		buzzerSequence++;
		tmp_duration += dot_add;
		dot_add /= 2;
	}

	if (staccato) {
 e12:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <_ZL8staccato>
 e16:	88 23       	and	r24, r24
 e18:	39 f0       	breq	.+14     	; 0xe28 <_ZL8nextNotev+0x278>
		staccato_rest_duration = tmp_duration / 2;
 e1a:	c7 01       	movw	r24, r14
 e1c:	96 95       	lsr	r25
 e1e:	87 95       	ror	r24
 e20:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <_ZL22staccato_rest_duration>
		tmp_duration -= staccato_rest_duration;
 e24:	e8 1a       	sub	r14, r24
 e26:	f1 08       	sbc	r15, r1
	}

	DanyBotBuzzer::playNote(rest ? SILENT_NOTE : note, tmp_duration, volume);
 e28:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
 e2c:	d1 11       	cpse	r29, r1
 e2e:	02 c0       	rjmp	.+4      	; 0xe34 <_ZL8nextNotev+0x284>
 e30:	8c 2f       	mov	r24, r28
 e32:	01 c0       	rjmp	.+2      	; 0xe36 <_ZL8nextNotev+0x286>
 e34:	8f ef       	ldi	r24, 0xFF	; 255
 e36:	b7 01       	movw	r22, r14
 e38:	0e 94 4f 05 	call	0xa9e	; 0xa9e <_ZN13DanyBotBuzzer8playNoteEhjh>
}
 e3c:	df 91       	pop	r29
 e3e:	cf 91       	pop	r28
 e40:	1f 91       	pop	r17
 e42:	0f 91       	pop	r16
 e44:	ff 90       	pop	r15
 e46:	ef 90       	pop	r14
 e48:	df 90       	pop	r13
 e4a:	cf 90       	pop	r12
 e4c:	bf 90       	pop	r11
 e4e:	af 90       	pop	r10
 e50:	9f 90       	pop	r9
 e52:	8f 90       	pop	r8
 e54:	7f 90       	pop	r7
 e56:	08 95       	ret

00000e58 <__vector_9>:
static uint16_t volume = 15;
static uint8_t staccato = 0;
static uint8_t staccato_rest_duration;
static void nextNote();

ISR(TIMER2_OVF_vect) {
 e58:	1f 92       	push	r1
 e5a:	0f 92       	push	r0
 e5c:	0f b6       	in	r0, 0x3f	; 63
 e5e:	0f 92       	push	r0
 e60:	11 24       	eor	r1, r1
 e62:	2f 93       	push	r18
 e64:	3f 93       	push	r19
 e66:	4f 93       	push	r20
 e68:	5f 93       	push	r21
 e6a:	6f 93       	push	r22
 e6c:	7f 93       	push	r23
 e6e:	8f 93       	push	r24
 e70:	9f 93       	push	r25
 e72:	af 93       	push	r26
 e74:	bf 93       	push	r27
 e76:	ef 93       	push	r30
 e78:	ff 93       	push	r31
	if (buzzerTimeout-- == 0) {
 e7a:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <_ZL13buzzerTimeout>
 e7e:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <_ZL13buzzerTimeout+0x1>
 e82:	9c 01       	movw	r18, r24
 e84:	21 50       	subi	r18, 0x01	; 1
 e86:	31 09       	sbc	r19, r1
 e88:	30 93 2f 01 	sts	0x012F, r19	; 0x80012f <_ZL13buzzerTimeout+0x1>
 e8c:	20 93 2e 01 	sts	0x012E, r18	; 0x80012e <_ZL13buzzerTimeout>
 e90:	89 2b       	or	r24, r25
 e92:	e9 f4       	brne	.+58     	; 0xece <__vector_9+0x76>
		TIMSK2 = 0;
 e94:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
		sei();
 e98:	78 94       	sei
		TCCR2B = (TCCR2B & 0xF8) | 0x3;
 e9a:	e1 eb       	ldi	r30, 0xB1	; 177
 e9c:	f0 e0       	ldi	r31, 0x00	; 0
 e9e:	80 81       	ld	r24, Z
 ea0:	88 7f       	andi	r24, 0xF8	; 248
 ea2:	83 60       	ori	r24, 0x03	; 3
 ea4:	80 83       	st	Z, r24
		OCR2A = (F_CPU / 64) / 1000;
 ea6:	8a ef       	ldi	r24, 0xFA	; 250
 ea8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
		OCR2B = 0;
 eac:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
		buzzerFinished = 1;
 eb0:	81 e0       	ldi	r24, 0x01	; 1
 eb2:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <buzzerFinished>
		if (buzzerSequence && (play_mode_setting == PLAY_AUTOMATIC))
 eb6:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <buzzerSequence>
 eba:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <buzzerSequence+0x1>
 ebe:	89 2b       	or	r24, r25
 ec0:	31 f0       	breq	.+12     	; 0xece <__vector_9+0x76>
 ec2:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <_ZL17play_mode_setting>
 ec6:	81 11       	cpse	r24, r1
 ec8:	02 c0       	rjmp	.+4      	; 0xece <__vector_9+0x76>
			nextNote();
 eca:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <_ZL8nextNotev>
	}
}
 ece:	ff 91       	pop	r31
 ed0:	ef 91       	pop	r30
 ed2:	bf 91       	pop	r27
 ed4:	af 91       	pop	r26
 ed6:	9f 91       	pop	r25
 ed8:	8f 91       	pop	r24
 eda:	7f 91       	pop	r23
 edc:	6f 91       	pop	r22
 ede:	5f 91       	pop	r21
 ee0:	4f 91       	pop	r20
 ee2:	3f 91       	pop	r19
 ee4:	2f 91       	pop	r18
 ee6:	0f 90       	pop	r0
 ee8:	0f be       	out	0x3f, r0	; 63
 eea:	0f 90       	pop	r0
 eec:	1f 90       	pop	r1
 eee:	18 95       	reti

00000ef0 <__mulsi3>:
 ef0:	db 01       	movw	r26, r22
 ef2:	8f 93       	push	r24
 ef4:	9f 93       	push	r25
 ef6:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__muluhisi3>
 efa:	bf 91       	pop	r27
 efc:	af 91       	pop	r26
 efe:	a2 9f       	mul	r26, r18
 f00:	80 0d       	add	r24, r0
 f02:	91 1d       	adc	r25, r1
 f04:	a3 9f       	mul	r26, r19
 f06:	90 0d       	add	r25, r0
 f08:	b2 9f       	mul	r27, r18
 f0a:	90 0d       	add	r25, r0
 f0c:	11 24       	eor	r1, r1
 f0e:	08 95       	ret

00000f10 <__udivmodhi4>:
 f10:	aa 1b       	sub	r26, r26
 f12:	bb 1b       	sub	r27, r27
 f14:	51 e1       	ldi	r21, 0x11	; 17
 f16:	07 c0       	rjmp	.+14     	; 0xf26 <__udivmodhi4_ep>

00000f18 <__udivmodhi4_loop>:
 f18:	aa 1f       	adc	r26, r26
 f1a:	bb 1f       	adc	r27, r27
 f1c:	a6 17       	cp	r26, r22
 f1e:	b7 07       	cpc	r27, r23
 f20:	10 f0       	brcs	.+4      	; 0xf26 <__udivmodhi4_ep>
 f22:	a6 1b       	sub	r26, r22
 f24:	b7 0b       	sbc	r27, r23

00000f26 <__udivmodhi4_ep>:
 f26:	88 1f       	adc	r24, r24
 f28:	99 1f       	adc	r25, r25
 f2a:	5a 95       	dec	r21
 f2c:	a9 f7       	brne	.-22     	; 0xf18 <__udivmodhi4_loop>
 f2e:	80 95       	com	r24
 f30:	90 95       	com	r25
 f32:	bc 01       	movw	r22, r24
 f34:	cd 01       	movw	r24, r26
 f36:	08 95       	ret

00000f38 <__udivmodsi4>:
 f38:	a1 e2       	ldi	r26, 0x21	; 33
 f3a:	1a 2e       	mov	r1, r26
 f3c:	aa 1b       	sub	r26, r26
 f3e:	bb 1b       	sub	r27, r27
 f40:	fd 01       	movw	r30, r26
 f42:	0d c0       	rjmp	.+26     	; 0xf5e <__udivmodsi4_ep>

00000f44 <__udivmodsi4_loop>:
 f44:	aa 1f       	adc	r26, r26
 f46:	bb 1f       	adc	r27, r27
 f48:	ee 1f       	adc	r30, r30
 f4a:	ff 1f       	adc	r31, r31
 f4c:	a2 17       	cp	r26, r18
 f4e:	b3 07       	cpc	r27, r19
 f50:	e4 07       	cpc	r30, r20
 f52:	f5 07       	cpc	r31, r21
 f54:	20 f0       	brcs	.+8      	; 0xf5e <__udivmodsi4_ep>
 f56:	a2 1b       	sub	r26, r18
 f58:	b3 0b       	sbc	r27, r19
 f5a:	e4 0b       	sbc	r30, r20
 f5c:	f5 0b       	sbc	r31, r21

00000f5e <__udivmodsi4_ep>:
 f5e:	66 1f       	adc	r22, r22
 f60:	77 1f       	adc	r23, r23
 f62:	88 1f       	adc	r24, r24
 f64:	99 1f       	adc	r25, r25
 f66:	1a 94       	dec	r1
 f68:	69 f7       	brne	.-38     	; 0xf44 <__udivmodsi4_loop>
 f6a:	60 95       	com	r22
 f6c:	70 95       	com	r23
 f6e:	80 95       	com	r24
 f70:	90 95       	com	r25
 f72:	9b 01       	movw	r18, r22
 f74:	ac 01       	movw	r20, r24
 f76:	bd 01       	movw	r22, r26
 f78:	cf 01       	movw	r24, r30
 f7a:	08 95       	ret

00000f7c <__divmodsi4>:
 f7c:	05 2e       	mov	r0, r21
 f7e:	97 fb       	bst	r25, 7
 f80:	1e f4       	brtc	.+6      	; 0xf88 <__divmodsi4+0xc>
 f82:	00 94       	com	r0
 f84:	0e 94 d5 07 	call	0xfaa	; 0xfaa <__negsi2>
 f88:	57 fd       	sbrc	r21, 7
 f8a:	07 d0       	rcall	.+14     	; 0xf9a <__divmodsi4_neg2>
 f8c:	0e 94 9c 07 	call	0xf38	; 0xf38 <__udivmodsi4>
 f90:	07 fc       	sbrc	r0, 7
 f92:	03 d0       	rcall	.+6      	; 0xf9a <__divmodsi4_neg2>
 f94:	4e f4       	brtc	.+18     	; 0xfa8 <__divmodsi4_exit>
 f96:	0c 94 d5 07 	jmp	0xfaa	; 0xfaa <__negsi2>

00000f9a <__divmodsi4_neg2>:
 f9a:	50 95       	com	r21
 f9c:	40 95       	com	r20
 f9e:	30 95       	com	r19
 fa0:	21 95       	neg	r18
 fa2:	3f 4f       	sbci	r19, 0xFF	; 255
 fa4:	4f 4f       	sbci	r20, 0xFF	; 255
 fa6:	5f 4f       	sbci	r21, 0xFF	; 255

00000fa8 <__divmodsi4_exit>:
 fa8:	08 95       	ret

00000faa <__negsi2>:
 faa:	90 95       	com	r25
 fac:	80 95       	com	r24
 fae:	70 95       	com	r23
 fb0:	61 95       	neg	r22
 fb2:	7f 4f       	sbci	r23, 0xFF	; 255
 fb4:	8f 4f       	sbci	r24, 0xFF	; 255
 fb6:	9f 4f       	sbci	r25, 0xFF	; 255
 fb8:	08 95       	ret

00000fba <__tablejump2__>:
 fba:	ee 0f       	add	r30, r30
 fbc:	ff 1f       	adc	r31, r31
 fbe:	05 90       	lpm	r0, Z+
 fc0:	f4 91       	lpm	r31, Z
 fc2:	e0 2d       	mov	r30, r0
 fc4:	09 94       	ijmp

00000fc6 <__umulhisi3>:
 fc6:	a2 9f       	mul	r26, r18
 fc8:	b0 01       	movw	r22, r0
 fca:	b3 9f       	mul	r27, r19
 fcc:	c0 01       	movw	r24, r0
 fce:	a3 9f       	mul	r26, r19
 fd0:	70 0d       	add	r23, r0
 fd2:	81 1d       	adc	r24, r1
 fd4:	11 24       	eor	r1, r1
 fd6:	91 1d       	adc	r25, r1
 fd8:	b2 9f       	mul	r27, r18
 fda:	70 0d       	add	r23, r0
 fdc:	81 1d       	adc	r24, r1
 fde:	11 24       	eor	r1, r1
 fe0:	91 1d       	adc	r25, r1
 fe2:	08 95       	ret

00000fe4 <__muluhisi3>:
 fe4:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <__umulhisi3>
 fe8:	a5 9f       	mul	r26, r21
 fea:	90 0d       	add	r25, r0
 fec:	b4 9f       	mul	r27, r20
 fee:	90 0d       	add	r25, r0
 ff0:	a4 9f       	mul	r26, r20
 ff2:	80 0d       	add	r24, r0
 ff4:	91 1d       	adc	r25, r1
 ff6:	11 24       	eor	r1, r1
 ff8:	08 95       	ret

00000ffa <_exit>:
 ffa:	f8 94       	cli

00000ffc <__stop_program>:
 ffc:	ff cf       	rjmp	.-2      	; 0xffc <__stop_program>
