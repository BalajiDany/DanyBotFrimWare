
DanyBotFrimWare.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000c20  00000cb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006e  0080011a  0080011a  00000cce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00000d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ceb  00000000  00000000  00000f98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f60  00000000  00000000  00002c83  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015ba  00000000  00000000  00003be3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000604  00000000  00000000  000051a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f16  00000000  00000000  000057a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015d3  00000000  00000000  000066ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  00007c8d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 96 00 	jmp	0x12c	; 0x12c <__ctors_end>
   4:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
   8:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
   c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  10:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  14:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  18:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  1c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  20:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  24:	0c 94 2c 04 	jmp	0x858	; 0x858 <__vector_9>
  28:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  2c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  30:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  34:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  38:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  3c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  40:	0c 94 3f 05 	jmp	0xa7e	; 0xa7e <__vector_16>
  44:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  48:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__vector_18>
  4c:	0c 94 03 05 	jmp	0xa06	; 0xa06 <__vector_19>
  50:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  54:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  58:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  5c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  60:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  64:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
  68:	7f 02       	muls	r23, r31
  6a:	79 02       	muls	r23, r25
  6c:	82 02       	muls	r24, r18
  6e:	85 02       	muls	r24, r21
  70:	88 02       	muls	r24, r24
  72:	8b 02       	muls	r24, r27
  74:	8e 02       	muls	r24, r30
  76:	91 02       	muls	r25, r17
  78:	94 02       	muls	r25, r20
  7a:	97 02       	muls	r25, r23
  7c:	9a 02       	muls	r25, r26
  7e:	9d 02       	muls	r25, r29
  80:	95 03       	fmuls	r17, r21
  82:	ad 03       	fmulsu	r18, r21
  84:	ad 03       	fmulsu	r18, r21
  86:	ad 03       	fmulsu	r18, r21
  88:	ad 03       	fmulsu	r18, r21
  8a:	ad 03       	fmulsu	r18, r21
  8c:	ad 03       	fmulsu	r18, r21
  8e:	ad 03       	fmulsu	r18, r21
  90:	ad 03       	fmulsu	r18, r21
  92:	ad 03       	fmulsu	r18, r21
  94:	ad 03       	fmulsu	r18, r21
  96:	ad 03       	fmulsu	r18, r21
  98:	ad 03       	fmulsu	r18, r21
  9a:	ad 03       	fmulsu	r18, r21
  9c:	ad 03       	fmulsu	r18, r21
  9e:	ad 03       	fmulsu	r18, r21
  a0:	ad 03       	fmulsu	r18, r21
  a2:	ad 03       	fmulsu	r18, r21
  a4:	ad 03       	fmulsu	r18, r21
  a6:	ad 03       	fmulsu	r18, r21
  a8:	ad 03       	fmulsu	r18, r21
  aa:	ad 03       	fmulsu	r18, r21
  ac:	ad 03       	fmulsu	r18, r21
  ae:	ad 03       	fmulsu	r18, r21
  b0:	ad 03       	fmulsu	r18, r21
  b2:	ad 03       	fmulsu	r18, r21
  b4:	ad 03       	fmulsu	r18, r21
  b6:	30 03       	mulsu	r19, r16
  b8:	ad 03       	fmulsu	r18, r21
  ba:	2e 03       	fmul	r18, r22
  bc:	ad 03       	fmulsu	r18, r21
  be:	ad 03       	fmulsu	r18, r21
  c0:	ad 03       	fmulsu	r18, r21
  c2:	ad 03       	fmulsu	r18, r21
  c4:	ad 03       	fmulsu	r18, r21
  c6:	ad 03       	fmulsu	r18, r21
  c8:	ad 03       	fmulsu	r18, r21
  ca:	ad 03       	fmulsu	r18, r21
  cc:	ad 03       	fmulsu	r18, r21
  ce:	ad 03       	fmulsu	r18, r21
  d0:	ad 03       	fmulsu	r18, r21
  d2:	ad 03       	fmulsu	r18, r21
  d4:	ad 03       	fmulsu	r18, r21
  d6:	ad 03       	fmulsu	r18, r21
  d8:	ad 03       	fmulsu	r18, r21
  da:	ad 03       	fmulsu	r18, r21
  dc:	ad 03       	fmulsu	r18, r21
  de:	ad 03       	fmulsu	r18, r21
  e0:	ad 03       	fmulsu	r18, r21
  e2:	ad 03       	fmulsu	r18, r21
  e4:	ad 03       	fmulsu	r18, r21
  e6:	ad 03       	fmulsu	r18, r21
  e8:	ad 03       	fmulsu	r18, r21
  ea:	ad 03       	fmulsu	r18, r21
  ec:	ad 03       	fmulsu	r18, r21
  ee:	ad 03       	fmulsu	r18, r21
  f0:	ad 03       	fmulsu	r18, r21
  f2:	ad 03       	fmulsu	r18, r21
  f4:	ad 03       	fmulsu	r18, r21
  f6:	ad 03       	fmulsu	r18, r21
  f8:	ad 03       	fmulsu	r18, r21
  fa:	ad 03       	fmulsu	r18, r21
  fc:	ad 03       	fmulsu	r18, r21
  fe:	ad 03       	fmulsu	r18, r21
 100:	b2 03       	fmuls	r19, r18
 102:	2b 03       	fmul	r18, r19
 104:	b5 03       	fmuls	r19, r21
 106:	32 03       	mulsu	r19, r18
 108:	35 03       	mulsu	r19, r21
 10a:	38 03       	fmul	r19, r16
 10c:	3b 03       	fmul	r19, r19
 10e:	ad 03       	fmulsu	r18, r21
 110:	ad 03       	fmulsu	r18, r21
 112:	ad 03       	fmulsu	r18, r21
 114:	ad 03       	fmulsu	r18, r21
 116:	3e 03       	fmul	r19, r22
 118:	50 03       	mulsu	r21, r16
 11a:	ad 03       	fmulsu	r18, r21
 11c:	65 03       	mulsu	r22, r21
 11e:	ad 03       	fmulsu	r18, r21
 120:	ad 03       	fmulsu	r18, r21
 122:	6b 03       	fmul	r22, r19
 124:	ad 03       	fmulsu	r18, r21
 126:	6e 03       	fmul	r22, r22
 128:	ad 03       	fmulsu	r18, r21
 12a:	8e 03       	fmulsu	r16, r22

0000012c <__ctors_end>:
 12c:	11 24       	eor	r1, r1
 12e:	1f be       	out	0x3f, r1	; 63
 130:	cf ef       	ldi	r28, 0xFF	; 255
 132:	d8 e0       	ldi	r29, 0x08	; 8
 134:	de bf       	out	0x3e, r29	; 62
 136:	cd bf       	out	0x3d, r28	; 61

00000138 <__do_copy_data>:
 138:	11 e0       	ldi	r17, 0x01	; 1
 13a:	a0 e0       	ldi	r26, 0x00	; 0
 13c:	b1 e0       	ldi	r27, 0x01	; 1
 13e:	e0 e2       	ldi	r30, 0x20	; 32
 140:	fc e0       	ldi	r31, 0x0C	; 12
 142:	02 c0       	rjmp	.+4      	; 0x148 <__do_copy_data+0x10>
 144:	05 90       	lpm	r0, Z+
 146:	0d 92       	st	X+, r0
 148:	aa 31       	cpi	r26, 0x1A	; 26
 14a:	b1 07       	cpc	r27, r17
 14c:	d9 f7       	brne	.-10     	; 0x144 <__do_copy_data+0xc>

0000014e <__do_clear_bss>:
 14e:	21 e0       	ldi	r18, 0x01	; 1
 150:	aa e1       	ldi	r26, 0x1A	; 26
 152:	b1 e0       	ldi	r27, 0x01	; 1
 154:	01 c0       	rjmp	.+2      	; 0x158 <.do_clear_bss_start>

00000156 <.do_clear_bss_loop>:
 156:	1d 92       	st	X+, r1

00000158 <.do_clear_bss_start>:
 158:	a8 38       	cpi	r26, 0x88	; 136
 15a:	b2 07       	cpc	r27, r18
 15c:	e1 f7       	brne	.-8      	; 0x156 <.do_clear_bss_loop>
 15e:	0e 94 c4 00 	call	0x188	; 0x188 <main>
 162:	0c 94 0e 06 	jmp	0xc1c	; 0xc1c <_exit>

00000166 <__bad_interrupt>:
 166:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000016a <_Z5setUpv>:
		_delay_ms(60);
    }
}

void setUp() {
	DanyBotTimer::setUp();
 16a:	0e 94 2d 05 	call	0xa5a	; 0xa5a <_ZN12DanyBotTimer5setUpEv>
	DanyBotLed::setUp();
 16e:	0e 94 78 04 	call	0x8f0	; 0x8f0 <_ZN10DanyBotLed5setUpEv>
	DanyBotPushButton::setUp();
 172:	0e 94 ac 04 	call	0x958	; 0x958 <_ZN17DanyBotPushButton5setUpEv>
	DanyBotMotors::setUp();
 176:	0e 94 9d 04 	call	0x93a	; 0x93a <_ZN13DanyBotMotors5setUpEv>
	DanyBotLineSensor::setUp();
 17a:	0e 94 99 04 	call	0x932	; 0x932 <_ZN17DanyBotLineSensor5setUpEv>
	DanyBotBuzzer::setUp();
 17e:	0e 94 35 01 	call	0x26a	; 0x26a <_ZN13DanyBotBuzzer5setUpEv>
	DanyBotSerial::setUp();
 182:	0e 94 af 04 	call	0x95e	; 0x95e <_ZN13DanyBotSerial5setUpEv>
 186:	08 95       	ret

00000188 <main>:

void setUp();

int main(void) {
	uint16_t sensor[NO_SENSOR];
	setUp();
 188:	0e 94 b5 00 	call	0x16a	; 0x16a <_Z5setUpv>
	//DanyBotSerial::writeByte(1);
	//DanyBotSerial::readByte();
	//DanyBotSerial::isAvailableToRead();
	//DanyBotSerial::isAvailableToWrite();
    while (1) {
	    DanyBotLed::toggle();
 18c:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <_ZN10DanyBotLed6toggleEv>
void setUp();

int main(void) {
	uint16_t sensor[NO_SENSOR];
	setUp();
	uint8_t count = 32;
 190:	80 e2       	ldi	r24, 0x20	; 32
 192:	05 c0       	rjmp	.+10     	; 0x19e <main+0x16>
		//		value[pr] = 0;
		//	}
		//}
		//bCount = 0;
		if(count == 126) {
			DanyBotSerial::writeByte(10);
 194:	8a e0       	ldi	r24, 0x0A	; 10
 196:	0e 94 c3 04 	call	0x986	; 0x986 <_ZN13DanyBotSerial9writeByteEh>
			count = 32;
 19a:	c0 e2       	ldi	r28, 0x20	; 32
 19c:	8c 2f       	mov	r24, r28
		}
		DanyBotSerial::writeByte(count++);
 19e:	c1 e0       	ldi	r28, 0x01	; 1
 1a0:	c8 0f       	add	r28, r24
 1a2:	0e 94 c3 04 	call	0x986	; 0x986 <_ZN13DanyBotSerial9writeByteEh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a6:	2f ef       	ldi	r18, 0xFF	; 255
 1a8:	8d ee       	ldi	r24, 0xED	; 237
 1aa:	92 e0       	ldi	r25, 0x02	; 2
 1ac:	21 50       	subi	r18, 0x01	; 1
 1ae:	80 40       	sbci	r24, 0x00	; 0
 1b0:	90 40       	sbci	r25, 0x00	; 0
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <main+0x24>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <main+0x2e>
 1b6:	00 00       	nop
	//DanyBotSerial::writeByte(1);
	//DanyBotSerial::readByte();
	//DanyBotSerial::isAvailableToRead();
	//DanyBotSerial::isAvailableToWrite();
    while (1) {
	    DanyBotLed::toggle();
 1b8:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <_ZN10DanyBotLed6toggleEv>
		//		DanyBotSerial::writeByte(value[pr]);
		//		value[pr] = 0;
		//	}
		//}
		//bCount = 0;
		if(count == 126) {
 1bc:	ce 37       	cpi	r28, 0x7E	; 126
 1be:	71 f7       	brne	.-36     	; 0x19c <main+0x14>
 1c0:	e9 cf       	rjmp	.-46     	; 0x194 <main+0xc>

000001c2 <_ZL16currentCharacterv>:
	buzzerSequence = 0;
}
static int8_t currentCharacter() {
	int8_t c = 0;
	do {
		if (use_program_space)
 1c2:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <_ZL17use_program_space>
 1c6:	22 23       	and	r18, r18
 1c8:	31 f0       	breq	.+12     	; 0x1d6 <_ZL16currentCharacterv+0x14>
		c = pgm_read_byte(buzzerSequence);
 1ca:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <buzzerSequence>
 1ce:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <buzzerSequence+0x1>
 1d2:	84 91       	lpm	r24, Z
 1d4:	05 c0       	rjmp	.+10     	; 0x1e0 <_ZL16currentCharacterv+0x1e>
		else
		c = *buzzerSequence;
 1d6:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <buzzerSequence>
 1da:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <buzzerSequence+0x1>
 1de:	80 81       	ld	r24, Z

		if (c >= 'A' && c <= 'Z')
 1e0:	9f eb       	ldi	r25, 0xBF	; 191
 1e2:	98 0f       	add	r25, r24
 1e4:	9a 31       	cpi	r25, 0x1A	; 26
 1e6:	08 f4       	brcc	.+2      	; 0x1ea <_ZL16currentCharacterv+0x28>
		c += 'a' - 'A';
 1e8:	80 5e       	subi	r24, 0xE0	; 224
	} while (c == ' ' && (buzzerSequence++));
 1ea:	80 32       	cpi	r24, 0x20	; 32
 1ec:	69 f4       	brne	.+26     	; 0x208 <_ZL16currentCharacterv+0x46>
 1ee:	40 91 20 01 	lds	r20, 0x0120	; 0x800120 <buzzerSequence>
 1f2:	50 91 21 01 	lds	r21, 0x0121	; 0x800121 <buzzerSequence+0x1>
 1f6:	ba 01       	movw	r22, r20
 1f8:	6f 5f       	subi	r22, 0xFF	; 255
 1fa:	7f 4f       	sbci	r23, 0xFF	; 255
 1fc:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <buzzerSequence+0x1>
 200:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <buzzerSequence>
	buzzerFinished = 1;
	buzzerSequence = 0;
}
static int8_t currentCharacter() {
	int8_t c = 0;
	do {
 204:	45 2b       	or	r20, r21
 206:	f9 f6       	brne	.-66     	; 0x1c6 <_ZL16currentCharacterv+0x4>
		if (c >= 'A' && c <= 'Z')
		c += 'a' - 'A';
	} while (c == ' ' && (buzzerSequence++));

	return c;
}
 208:	08 95       	ret

0000020a <_ZL9getNumberv>:
static uint16_t getNumber() {
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
	uint16_t arg = 0;
	int8_t c = currentCharacter();
 20e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZL16currentCharacterv>
	while (c >= '0' && c <= '9') {
 212:	90 ed       	ldi	r25, 0xD0	; 208
 214:	98 0f       	add	r25, r24
 216:	9a 30       	cpi	r25, 0x0A	; 10
 218:	10 f5       	brcc	.+68     	; 0x25e <_ZL9getNumberv+0x54>
 21a:	c0 e0       	ldi	r28, 0x00	; 0
 21c:	d0 e0       	ldi	r29, 0x00	; 0
		arg *= 10;
		arg += c - '0';
 21e:	9e 01       	movw	r18, r28
 220:	22 0f       	add	r18, r18
 222:	33 1f       	adc	r19, r19
 224:	cc 0f       	add	r28, r28
 226:	dd 1f       	adc	r29, r29
 228:	cc 0f       	add	r28, r28
 22a:	dd 1f       	adc	r29, r29
 22c:	cc 0f       	add	r28, r28
 22e:	dd 1f       	adc	r29, r29
 230:	c2 0f       	add	r28, r18
 232:	d3 1f       	adc	r29, r19
 234:	c8 0f       	add	r28, r24
 236:	d1 1d       	adc	r29, r1
 238:	87 fd       	sbrc	r24, 7
 23a:	da 95       	dec	r29
 23c:	e0 97       	sbiw	r28, 0x30	; 48
		buzzerSequence++;
 23e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <buzzerSequence>
 242:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <buzzerSequence+0x1>
 246:	01 96       	adiw	r24, 0x01	; 1
 248:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <buzzerSequence+0x1>
 24c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <buzzerSequence>
		c = currentCharacter();
 250:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZL16currentCharacterv>
	return c;
}
static uint16_t getNumber() {
	uint16_t arg = 0;
	int8_t c = currentCharacter();
	while (c >= '0' && c <= '9') {
 254:	90 ed       	ldi	r25, 0xD0	; 208
 256:	98 0f       	add	r25, r24
 258:	9a 30       	cpi	r25, 0x0A	; 10
 25a:	08 f3       	brcs	.-62     	; 0x21e <_ZL9getNumberv+0x14>
 25c:	02 c0       	rjmp	.+4      	; 0x262 <_ZL9getNumberv+0x58>
	} while (c == ' ' && (buzzerSequence++));

	return c;
}
static uint16_t getNumber() {
	uint16_t arg = 0;
 25e:	c0 e0       	ldi	r28, 0x00	; 0
 260:	d0 e0       	ldi	r29, 0x00	; 0
		buzzerSequence++;
		c = currentCharacter();
	}

	return arg;
}
 262:	ce 01       	movw	r24, r28
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <_ZN13DanyBotBuzzer5setUpEv>:
			nextNote();
	}
}

void DanyBotBuzzer::setUp() {
	TIMSK2 = 0;
 26a:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
	TCCR2A = 0x21;
 26e:	81 e2       	ldi	r24, 0x21	; 33
 270:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	TCCR2B = 0x0B;
 274:	8b e0       	ldi	r24, 0x0B	; 11
 276:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	OCR2A = (F_CPU / 64) / 1000;
 27a:	8a ef       	ldi	r24, 0xFA	; 250
 27c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	OCR2B = 0;
 280:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
	DDRD |= (1 << PORTD3);
 284:	53 9a       	sbi	0x0a, 3	; 10
	sei();
 286:	78 94       	sei
 288:	08 95       	ret

0000028a <_ZN13DanyBotBuzzer13playFrequencyEjjh>:
}

void DanyBotBuzzer::playFrequency(uint16_t freq, uint16_t dur, uint8_t volume) {
 28a:	2f 92       	push	r2
 28c:	3f 92       	push	r3
 28e:	4f 92       	push	r4
 290:	5f 92       	push	r5
 292:	6f 92       	push	r6
 294:	7f 92       	push	r7
 296:	8f 92       	push	r8
 298:	9f 92       	push	r9
 29a:	af 92       	push	r10
 29c:	bf 92       	push	r11
 29e:	cf 92       	push	r12
 2a0:	df 92       	push	r13
 2a2:	ef 92       	push	r14
 2a4:	ff 92       	push	r15
 2a6:	0f 93       	push	r16
 2a8:	1f 93       	push	r17
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	00 d0       	rcall	.+0      	; 0x2b0 <_ZN13DanyBotBuzzer13playFrequencyEjjh+0x26>
 2b0:	00 d0       	rcall	.+0      	; 0x2b2 <_ZN13DanyBotBuzzer13playFrequencyEjjh+0x28>
 2b2:	1f 92       	push	r1
 2b4:	cd b7       	in	r28, 0x3d	; 61
 2b6:	de b7       	in	r29, 0x3e	; 62
 2b8:	7a 83       	std	Y+2, r23	; 0x02
 2ba:	69 83       	std	Y+1, r22	; 0x01
 2bc:	4b 83       	std	Y+3, r20	; 0x03
	buzzerFinished = 0;
 2be:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <buzzerFinished>

	uint16_t timeout;
	uint8_t multiplier = 1;

	if (freq & DIV_BY_10) {
 2c2:	99 23       	and	r25, r25
 2c4:	0c f0       	brlt	.+2      	; 0x2c8 <_ZN13DanyBotBuzzer13playFrequencyEjjh+0x3e>
 2c6:	a2 c0       	rjmp	.+324    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 2c8:	1c 01       	movw	r2, r24
 2ca:	e8 94       	clt
 2cc:	37 f8       	bld	r3, 7
 2ce:	20 e9       	ldi	r18, 0x90	; 144
 2d0:	22 16       	cp	r2, r18
 2d2:	31 04       	cpc	r3, r1
 2d4:	28 f4       	brcc	.+10     	; 0x2e0 <_ZN13DanyBotBuzzer13playFrequencyEjjh+0x56>
 2d6:	0f 2e       	mov	r0, r31
 2d8:	f0 e9       	ldi	r31, 0x90	; 144
 2da:	2f 2e       	mov	r2, r31
 2dc:	31 2c       	mov	r3, r1
 2de:	f0 2d       	mov	r31, r0

	uint16_t top;
	uint8_t newCS2 = 2;
	uint16_t divider = cs2_divider[newCS2];

	top = (uint16_t)(((F_CPU / 16 * multiplier) + (freq >> 1)) / freq);
 2e0:	c1 01       	movw	r24, r2
 2e2:	96 95       	lsr	r25
 2e4:	87 95       	ror	r24
 2e6:	2c 01       	movw	r4, r24
 2e8:	61 2c       	mov	r6, r1
 2ea:	71 2c       	mov	r7, r1
 2ec:	61 01       	movw	r12, r2
 2ee:	e1 2c       	mov	r14, r1
 2f0:	f1 2c       	mov	r15, r1
 2f2:	c3 01       	movw	r24, r6
 2f4:	b2 01       	movw	r22, r4
 2f6:	60 58       	subi	r22, 0x80	; 128
 2f8:	79 46       	sbci	r23, 0x69	; 105
 2fa:	87 46       	sbci	r24, 0x67	; 103
 2fc:	9f 4f       	sbci	r25, 0xFF	; 255
 2fe:	a7 01       	movw	r20, r14
 300:	96 01       	movw	r18, r12
 302:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__udivmodsi4>
 306:	3d 83       	std	Y+5, r19	; 0x05
 308:	2c 83       	std	Y+4, r18	; 0x04

	while (top > 255) {
 30a:	2f 3f       	cpi	r18, 0xFF	; 255
 30c:	31 05       	cpc	r19, r1
 30e:	81 f1       	breq	.+96     	; 0x370 <_ZN13DanyBotBuzzer13playFrequencyEjjh+0xe6>
 310:	78 f1       	brcs	.+94     	; 0x370 <_ZN13DanyBotBuzzer13playFrequencyEjjh+0xe6>

	uint16_t top;
	uint8_t newCS2 = 2;
	uint16_t divider = cs2_divider[newCS2];

	top = (uint16_t)(((F_CPU / 16 * multiplier) + (freq >> 1)) / freq);
 312:	0f 2e       	mov	r0, r31
 314:	fa e0       	ldi	r31, 0x0A	; 10
 316:	8f 2e       	mov	r8, r31
 318:	91 2c       	mov	r9, r1
 31a:	a1 2c       	mov	r10, r1
 31c:	b1 2c       	mov	r11, r1
 31e:	f0 2d       	mov	r31, r0

	uint16_t timeout;
	uint8_t multiplier = 1;

	if (freq & DIV_BY_10) {
		multiplier = 10;
 320:	0a e0       	ldi	r16, 0x0A	; 10

void DanyBotBuzzer::playFrequency(uint16_t freq, uint16_t dur, uint8_t volume) {
	buzzerFinished = 0;

	uint16_t timeout;
	uint8_t multiplier = 1;
 322:	12 e0       	ldi	r17, 0x02	; 2
	uint16_t divider = cs2_divider[newCS2];

	top = (uint16_t)(((F_CPU / 16 * multiplier) + (freq >> 1)) / freq);

	while (top > 255) {
		divider = cs2_divider[++newCS2];
 324:	1f 5f       	subi	r17, 0xFF	; 255
 326:	e1 2f       	mov	r30, r17
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	ee 0f       	add	r30, r30
 32c:	ff 1f       	adc	r31, r31
 32e:	e6 5f       	subi	r30, 0xF6	; 246
 330:	fe 4f       	sbci	r31, 0xFE	; 254
		top = (uint16_t)(((F_CPU / 2 / divider * multiplier) + (freq >> 1)) / freq);
 332:	20 81       	ld	r18, Z
 334:	31 81       	ldd	r19, Z+1	; 0x01
 336:	40 e0       	ldi	r20, 0x00	; 0
 338:	50 e0       	ldi	r21, 0x00	; 0
 33a:	60 e0       	ldi	r22, 0x00	; 0
 33c:	72 e1       	ldi	r23, 0x12	; 18
 33e:	8a e7       	ldi	r24, 0x7A	; 122
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__udivmodsi4>
 346:	c5 01       	movw	r24, r10
 348:	b4 01       	movw	r22, r8
 34a:	0e 94 89 05 	call	0xb12	; 0xb12 <__mulsi3>
 34e:	64 0d       	add	r22, r4
 350:	75 1d       	adc	r23, r5
 352:	86 1d       	adc	r24, r6
 354:	97 1d       	adc	r25, r7
 356:	a7 01       	movw	r20, r14
 358:	96 01       	movw	r18, r12
 35a:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__udivmodsi4>
 35e:	3d 83       	std	Y+5, r19	; 0x05
 360:	2c 83       	std	Y+4, r18	; 0x04
	uint8_t newCS2 = 2;
	uint16_t divider = cs2_divider[newCS2];

	top = (uint16_t)(((F_CPU / 16 * multiplier) + (freq >> 1)) / freq);

	while (top > 255) {
 362:	2f 3f       	cpi	r18, 0xFF	; 255
 364:	31 05       	cpc	r19, r1
 366:	09 f0       	breq	.+2      	; 0x36a <_ZN13DanyBotBuzzer13playFrequencyEjjh+0xe0>
 368:	e8 f6       	brcc	.-70     	; 0x324 <_ZN13DanyBotBuzzer13playFrequencyEjjh+0x9a>
		divider = cs2_divider[++newCS2];
		top = (uint16_t)(((F_CPU / 2 / divider * multiplier) + (freq >> 1)) / freq);
	}

	if (multiplier == 10)
 36a:	0a 30       	cpi	r16, 0x0A	; 10
 36c:	91 f4       	brne	.+36     	; 0x392 <_ZN13DanyBotBuzzer13playFrequencyEjjh+0x108>
 36e:	01 c0       	rjmp	.+2      	; 0x372 <_ZN13DanyBotBuzzer13playFrequencyEjjh+0xe8>
		freq = min;
	if (multiplier == 1 && freq > 10000)
		freq = 10000;

	uint16_t top;
	uint8_t newCS2 = 2;
 370:	12 e0       	ldi	r17, 0x02	; 2
		divider = cs2_divider[++newCS2];
		top = (uint16_t)(((F_CPU / 2 / divider * multiplier) + (freq >> 1)) / freq);
	}

	if (multiplier == 10)
		freq = (freq + 5) / 10;
 372:	91 01       	movw	r18, r2
 374:	2b 5f       	subi	r18, 0xFB	; 251
 376:	3f 4f       	sbci	r19, 0xFF	; 255
 378:	ad ec       	ldi	r26, 0xCD	; 205
 37a:	bc ec       	ldi	r27, 0xCC	; 204
 37c:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <__umulhisi3>
 380:	1c 01       	movw	r2, r24
 382:	36 94       	lsr	r3
 384:	27 94       	ror	r2
 386:	36 94       	lsr	r3
 388:	27 94       	ror	r2
 38a:	36 94       	lsr	r3
 38c:	27 94       	ror	r2
 38e:	01 c0       	rjmp	.+2      	; 0x392 <_ZN13DanyBotBuzzer13playFrequencyEjjh+0x108>
		freq = min;
	if (multiplier == 1 && freq > 10000)
		freq = 10000;

	uint16_t top;
	uint8_t newCS2 = 2;
 390:	12 e0       	ldi	r17, 0x02	; 2
	}

	if (multiplier == 10)
		freq = (freq + 5) / 10;

	if (freq == 1000)
 392:	38 ee       	ldi	r19, 0xE8	; 232
 394:	23 16       	cp	r2, r19
 396:	33 e0       	ldi	r19, 0x03	; 3
 398:	33 06       	cpc	r3, r19
 39a:	69 f0       	breq	.+26     	; 0x3b6 <_ZN13DanyBotBuzzer13playFrequencyEjjh+0x12c>
		timeout = dur;
	else
		timeout = (uint16_t)((long)dur * freq / 1000);
 39c:	29 81       	ldd	r18, Y+1	; 0x01
 39e:	3a 81       	ldd	r19, Y+2	; 0x02
 3a0:	d1 01       	movw	r26, r2
 3a2:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <__umulhisi3>
 3a6:	28 ee       	ldi	r18, 0xE8	; 232
 3a8:	33 e0       	ldi	r19, 0x03	; 3
 3aa:	40 e0       	ldi	r20, 0x00	; 0
 3ac:	50 e0       	ldi	r21, 0x00	; 0
 3ae:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__divmodsi4>
 3b2:	3a 83       	std	Y+2, r19	; 0x02
 3b4:	29 83       	std	Y+1, r18	; 0x01

	if (volume > 15)
		volume = 15;

	TIMSK2 = 0;
 3b6:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>

	TCCR2B = (TCCR2B & 0xF8) | newCS2;
 3ba:	e1 eb       	ldi	r30, 0xB1	; 177
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	80 81       	ld	r24, Z
 3c0:	88 7f       	andi	r24, 0xF8	; 248
 3c2:	18 2b       	or	r17, r24
 3c4:	10 83       	st	Z, r17
	OCR2A = top;
 3c6:	8c 81       	ldd	r24, Y+4	; 0x04
 3c8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	OCR2B = top >> (16 - volume);
 3cc:	0b 81       	ldd	r16, Y+3	; 0x03
 3ce:	00 31       	cpi	r16, 0x10	; 16
 3d0:	08 f0       	brcs	.+2      	; 0x3d4 <_ZN13DanyBotBuzzer13playFrequencyEjjh+0x14a>
 3d2:	0f e0       	ldi	r16, 0x0F	; 15
 3d4:	80 e1       	ldi	r24, 0x10	; 16
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	80 1b       	sub	r24, r16
 3da:	91 09       	sbc	r25, r1
 3dc:	2c 81       	ldd	r18, Y+4	; 0x04
 3de:	3d 81       	ldd	r19, Y+5	; 0x05
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <_ZN13DanyBotBuzzer13playFrequencyEjjh+0x15c>
 3e2:	36 95       	lsr	r19
 3e4:	27 95       	ror	r18
 3e6:	8a 95       	dec	r24
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <_ZN13DanyBotBuzzer13playFrequencyEjjh+0x158>
 3ea:	3d 83       	std	Y+5, r19	; 0x05
 3ec:	2c 83       	std	Y+4, r18	; 0x04
 3ee:	20 93 b4 00 	sts	0x00B4, r18	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
	buzzerTimeout = timeout;
 3f2:	89 81       	ldd	r24, Y+1	; 0x01
 3f4:	9a 81       	ldd	r25, Y+2	; 0x02
 3f6:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <_ZL13buzzerTimeout+0x1>
 3fa:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <_ZL13buzzerTimeout>

	TIFR2 |= 0xFF;
 3fe:	87 b3       	in	r24, 0x17	; 23
 400:	8f ef       	ldi	r24, 0xFF	; 255
 402:	87 bb       	out	0x17, r24	; 23

	TIMSK2 = (1 << TOIE2);
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
}
 40a:	31 c0       	rjmp	.+98     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 40c:	88 32       	cpi	r24, 0x28	; 40
 40e:	91 05       	cpc	r25, r1
 410:	10 f4       	brcc	.+4      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 412:	88 e2       	ldi	r24, 0x28	; 40
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	1c 01       	movw	r2, r24
 418:	91 e1       	ldi	r25, 0x11	; 17
 41a:	29 16       	cp	r2, r25
 41c:	97 e2       	ldi	r25, 0x27	; 39
 41e:	39 06       	cpc	r3, r25
 420:	30 f0       	brcs	.+12     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 422:	0f 2e       	mov	r0, r31
 424:	f0 e1       	ldi	r31, 0x10	; 16
 426:	2f 2e       	mov	r2, r31
 428:	f7 e2       	ldi	r31, 0x27	; 39
 42a:	3f 2e       	mov	r3, r31
 42c:	f0 2d       	mov	r31, r0

	uint16_t top;
	uint8_t newCS2 = 2;
	uint16_t divider = cs2_divider[newCS2];

	top = (uint16_t)(((F_CPU / 16 * multiplier) + (freq >> 1)) / freq);
 42e:	c1 01       	movw	r24, r2
 430:	96 95       	lsr	r25
 432:	87 95       	ror	r24
 434:	2c 01       	movw	r4, r24
 436:	61 2c       	mov	r6, r1
 438:	71 2c       	mov	r7, r1
 43a:	61 01       	movw	r12, r2
 43c:	e1 2c       	mov	r14, r1
 43e:	f1 2c       	mov	r15, r1
 440:	c3 01       	movw	r24, r6
 442:	b2 01       	movw	r22, r4
 444:	60 5c       	subi	r22, 0xC0	; 192
 446:	7d 4b       	sbci	r23, 0xBD	; 189
 448:	80 4f       	sbci	r24, 0xF0	; 240
 44a:	9f 4f       	sbci	r25, 0xFF	; 255
 44c:	a7 01       	movw	r20, r14
 44e:	96 01       	movw	r18, r12
 450:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__udivmodsi4>
 454:	3d 83       	std	Y+5, r19	; 0x05
 456:	2c 83       	std	Y+4, r18	; 0x04

	while (top > 255) {
 458:	2f 3f       	cpi	r18, 0xFF	; 255
 45a:	31 05       	cpc	r19, r1
 45c:	09 f0       	breq	.+2      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 45e:	08 f4       	brcc	.+2      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 460:	97 cf       	rjmp	.-210    	; 0x390 <_ZN13DanyBotBuzzer13playFrequencyEjjh+0x106>

	uint16_t top;
	uint8_t newCS2 = 2;
	uint16_t divider = cs2_divider[newCS2];

	top = (uint16_t)(((F_CPU / 16 * multiplier) + (freq >> 1)) / freq);
 462:	81 2c       	mov	r8, r1
 464:	91 2c       	mov	r9, r1
 466:	54 01       	movw	r10, r8
 468:	83 94       	inc	r8

void DanyBotBuzzer::playFrequency(uint16_t freq, uint16_t dur, uint8_t volume) {
	buzzerFinished = 0;

	uint16_t timeout;
	uint8_t multiplier = 1;
 46a:	01 e0       	ldi	r16, 0x01	; 1
 46c:	5a cf       	rjmp	.-332    	; 0x322 <_ZN13DanyBotBuzzer13playFrequencyEjjh+0x98>
	buzzerTimeout = timeout;

	TIFR2 |= 0xFF;

	TIMSK2 = (1 << TOIE2);
}
 46e:	0f 90       	pop	r0
 470:	0f 90       	pop	r0
 472:	0f 90       	pop	r0
 474:	0f 90       	pop	r0
 476:	0f 90       	pop	r0
 478:	df 91       	pop	r29
 47a:	cf 91       	pop	r28
 47c:	1f 91       	pop	r17
 47e:	0f 91       	pop	r16
 480:	ff 90       	pop	r15
 482:	ef 90       	pop	r14
 484:	df 90       	pop	r13
 486:	cf 90       	pop	r12
 488:	bf 90       	pop	r11
 48a:	af 90       	pop	r10
 48c:	9f 90       	pop	r9
 48e:	8f 90       	pop	r8
 490:	7f 90       	pop	r7
 492:	6f 90       	pop	r6
 494:	5f 90       	pop	r5
 496:	4f 90       	pop	r4
 498:	3f 90       	pop	r3
 49a:	2f 90       	pop	r2
 49c:	08 95       	ret

0000049e <_ZN13DanyBotBuzzer8playNoteEhjh>:
void DanyBotBuzzer::playNote(uint8_t note, uint16_t dur, uint8_t volume) {
 49e:	cf 93       	push	r28
 4a0:	df 93       	push	r29
 4a2:	eb 01       	movw	r28, r22
	uint16_t freq = 0;
	uint8_t offset_note = note - 16;

	if (note == SILENT_NOTE || volume == 0) {
 4a4:	8f 3f       	cpi	r24, 0xFF	; 255
 4a6:	11 f0       	breq	.+4      	; 0x4ac <_ZN13DanyBotBuzzer8playNoteEhjh+0xe>
 4a8:	41 11       	cpse	r20, r1
 4aa:	07 c0       	rjmp	.+14     	; 0x4ba <_ZN13DanyBotBuzzer8playNoteEhjh+0x1c>
		freq = 1000;
		DanyBotBuzzer::playFrequency(freq, dur, 0);
 4ac:	40 e0       	ldi	r20, 0x00	; 0
 4ae:	be 01       	movw	r22, r28
 4b0:	88 ee       	ldi	r24, 0xE8	; 232
 4b2:	93 e0       	ldi	r25, 0x03	; 3
 4b4:	0e 94 45 01 	call	0x28a	; 0x28a <_ZN13DanyBotBuzzer13playFrequencyEjjh>
		return;
 4b8:	78 c0       	rjmp	.+240    	; 0x5aa <_ZN13DanyBotBuzzer8playNoteEhjh+0x10c>
	}

	if (note <= 16)
 4ba:	81 31       	cpi	r24, 0x11	; 17
 4bc:	e8 f0       	brcs	.+58     	; 0x4f8 <_ZN13DanyBotBuzzer8playNoteEhjh+0x5a>

	TIMSK2 = (1 << TOIE2);
}
void DanyBotBuzzer::playNote(uint8_t note, uint16_t dur, uint8_t volume) {
	uint16_t freq = 0;
	uint8_t offset_note = note - 16;
 4be:	80 51       	subi	r24, 0x10	; 16
 4c0:	80 36       	cpi	r24, 0x60	; 96
 4c2:	08 f0       	brcs	.+2      	; 0x4c6 <_ZN13DanyBotBuzzer8playNoteEhjh+0x28>
 4c4:	8f e5       	ldi	r24, 0x5F	; 95
	if (note <= 16)
	offset_note = 0;
	else if (offset_note > 95)
	offset_note = 95;

	uint8_t exponent = offset_note / 12;
 4c6:	2b ea       	ldi	r18, 0xAB	; 171
 4c8:	82 9f       	mul	r24, r18
 4ca:	21 2d       	mov	r18, r1
 4cc:	11 24       	eor	r1, r1
 4ce:	26 95       	lsr	r18
 4d0:	26 95       	lsr	r18
 4d2:	26 95       	lsr	r18

	switch (offset_note - exponent * 12) {
 4d4:	62 2f       	mov	r22, r18
 4d6:	e8 2f       	mov	r30, r24
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	8c e0       	ldi	r24, 0x0C	; 12
 4dc:	28 9f       	mul	r18, r24
 4de:	e0 19       	sub	r30, r0
 4e0:	f1 09       	sbc	r31, r1
 4e2:	11 24       	eor	r1, r1
 4e4:	ec 30       	cpi	r30, 0x0C	; 12
 4e6:	f1 05       	cpc	r31, r1
 4e8:	58 f5       	brcc	.+86     	; 0x540 <_ZN13DanyBotBuzzer8playNoteEhjh+0xa2>
 4ea:	ec 5c       	subi	r30, 0xCC	; 204
 4ec:	ff 4f       	sbci	r31, 0xFF	; 255
 4ee:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <__tablejump2__>
		case 0:
		freq = 412;
		break;
		
		case 1:
		freq = 437;
 4f2:	85 eb       	ldi	r24, 0xB5	; 181
 4f4:	91 e0       	ldi	r25, 0x01	; 1
 4f6:	26 c0       	rjmp	.+76     	; 0x544 <_ZN13DanyBotBuzzer8playNoteEhjh+0xa6>
	else if (offset_note > 95)
	offset_note = 95;

	uint8_t exponent = offset_note / 12;

	switch (offset_note - exponent * 12) {
 4f8:	60 e0       	ldi	r22, 0x00	; 0
 4fa:	70 e0       	ldi	r23, 0x00	; 0
	if (note <= 16)
	offset_note = 0;
	else if (offset_note > 95)
	offset_note = 95;

	uint8_t exponent = offset_note / 12;
 4fc:	20 e0       	ldi	r18, 0x00	; 0

	switch (offset_note - exponent * 12) {
		case 0:
		freq = 412;
 4fe:	8c e9       	ldi	r24, 0x9C	; 156
 500:	91 e0       	ldi	r25, 0x01	; 1
		break;
 502:	20 c0       	rjmp	.+64     	; 0x544 <_ZN13DanyBotBuzzer8playNoteEhjh+0xa6>
		case 1:
		freq = 437;
		break;
		
		case 2:
		freq = 463;
 504:	8f ec       	ldi	r24, 0xCF	; 207
 506:	91 e0       	ldi	r25, 0x01	; 1
		break;
 508:	1d c0       	rjmp	.+58     	; 0x544 <_ZN13DanyBotBuzzer8playNoteEhjh+0xa6>
		
		case 3:
		freq = 490;
 50a:	8a ee       	ldi	r24, 0xEA	; 234
 50c:	91 e0       	ldi	r25, 0x01	; 1
		break;
 50e:	1a c0       	rjmp	.+52     	; 0x544 <_ZN13DanyBotBuzzer8playNoteEhjh+0xa6>
		
		case 4:
		freq = 519;
 510:	87 e0       	ldi	r24, 0x07	; 7
 512:	92 e0       	ldi	r25, 0x02	; 2
		break;
 514:	17 c0       	rjmp	.+46     	; 0x544 <_ZN13DanyBotBuzzer8playNoteEhjh+0xa6>
		
		case 5:
		freq = 550;
 516:	86 e2       	ldi	r24, 0x26	; 38
 518:	92 e0       	ldi	r25, 0x02	; 2
		break;
 51a:	14 c0       	rjmp	.+40     	; 0x544 <_ZN13DanyBotBuzzer8playNoteEhjh+0xa6>
		
		case 6:
		freq = 583;
 51c:	87 e4       	ldi	r24, 0x47	; 71
 51e:	92 e0       	ldi	r25, 0x02	; 2
		break;
 520:	11 c0       	rjmp	.+34     	; 0x544 <_ZN13DanyBotBuzzer8playNoteEhjh+0xa6>
		
		case 7:
		freq = 617;
 522:	89 e6       	ldi	r24, 0x69	; 105
 524:	92 e0       	ldi	r25, 0x02	; 2
		break;
 526:	0e c0       	rjmp	.+28     	; 0x544 <_ZN13DanyBotBuzzer8playNoteEhjh+0xa6>
		
		case 8:
		freq = 654;
 528:	8e e8       	ldi	r24, 0x8E	; 142
 52a:	92 e0       	ldi	r25, 0x02	; 2
		break;
 52c:	0b c0       	rjmp	.+22     	; 0x544 <_ZN13DanyBotBuzzer8playNoteEhjh+0xa6>
		
		case 9:
		freq = 693;
 52e:	85 eb       	ldi	r24, 0xB5	; 181
 530:	92 e0       	ldi	r25, 0x02	; 2
		break;
 532:	08 c0       	rjmp	.+16     	; 0x544 <_ZN13DanyBotBuzzer8playNoteEhjh+0xa6>
		
		case 10:
		freq = 734;
 534:	8e ed       	ldi	r24, 0xDE	; 222
 536:	92 e0       	ldi	r25, 0x02	; 2
		break;
 538:	05 c0       	rjmp	.+10     	; 0x544 <_ZN13DanyBotBuzzer8playNoteEhjh+0xa6>
		
		case 11:
		freq = 778;
 53a:	8a e0       	ldi	r24, 0x0A	; 10
 53c:	93 e0       	ldi	r25, 0x03	; 3
		break;
 53e:	02 c0       	rjmp	.+4      	; 0x544 <_ZN13DanyBotBuzzer8playNoteEhjh+0xa6>
	TIFR2 |= 0xFF;

	TIMSK2 = (1 << TOIE2);
}
void DanyBotBuzzer::playNote(uint8_t note, uint16_t dur, uint8_t volume) {
	uint16_t freq = 0;
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	90 e0       	ldi	r25, 0x00	; 0
		case 11:
		freq = 778;
		break;
	}

	if (exponent < 7) {
 544:	27 30       	cpi	r18, 0x07	; 7
 546:	b8 f4       	brcc	.+46     	; 0x576 <_ZN13DanyBotBuzzer8playNoteEhjh+0xd8>
		freq = freq << exponent;
 548:	02 c0       	rjmp	.+4      	; 0x54e <_ZN13DanyBotBuzzer8playNoteEhjh+0xb0>
 54a:	88 0f       	add	r24, r24
 54c:	99 1f       	adc	r25, r25
 54e:	6a 95       	dec	r22
 550:	e2 f7       	brpl	.-8      	; 0x54a <_ZN13DanyBotBuzzer8playNoteEhjh+0xac>
		if (exponent > 1)
 552:	22 30       	cpi	r18, 0x02	; 2
 554:	70 f0       	brcs	.+28     	; 0x572 <_ZN13DanyBotBuzzer8playNoteEhjh+0xd4>
			freq = (freq + 5) / 10;
 556:	9c 01       	movw	r18, r24
 558:	2b 5f       	subi	r18, 0xFB	; 251
 55a:	3f 4f       	sbci	r19, 0xFF	; 255
 55c:	ad ec       	ldi	r26, 0xCD	; 205
 55e:	bc ec       	ldi	r27, 0xCC	; 204
 560:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <__umulhisi3>
 564:	96 95       	lsr	r25
 566:	87 95       	ror	r24
 568:	96 95       	lsr	r25
 56a:	87 95       	ror	r24
 56c:	96 95       	lsr	r25
 56e:	87 95       	ror	r24
 570:	16 c0       	rjmp	.+44     	; 0x59e <_ZN13DanyBotBuzzer8playNoteEhjh+0x100>
		else
			freq += DIV_BY_10;
 572:	90 58       	subi	r25, 0x80	; 128
 574:	14 c0       	rjmp	.+40     	; 0x59e <_ZN13DanyBotBuzzer8playNoteEhjh+0x100>
	}
	else
		freq = (freq * 64 + 2) / 5;
 576:	00 24       	eor	r0, r0
 578:	96 95       	lsr	r25
 57a:	87 95       	ror	r24
 57c:	07 94       	ror	r0
 57e:	96 95       	lsr	r25
 580:	87 95       	ror	r24
 582:	07 94       	ror	r0
 584:	98 2f       	mov	r25, r24
 586:	80 2d       	mov	r24, r0
 588:	9c 01       	movw	r18, r24
 58a:	2e 5f       	subi	r18, 0xFE	; 254
 58c:	3f 4f       	sbci	r19, 0xFF	; 255
 58e:	ad ec       	ldi	r26, 0xCD	; 205
 590:	bc ec       	ldi	r27, 0xCC	; 204
 592:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <__umulhisi3>
 596:	96 95       	lsr	r25
 598:	87 95       	ror	r24
 59a:	96 95       	lsr	r25
 59c:	87 95       	ror	r24

	if (volume > 15)
		volume = 15;
	playFrequency(freq, dur, volume);
 59e:	40 31       	cpi	r20, 0x10	; 16
 5a0:	08 f0       	brcs	.+2      	; 0x5a4 <_ZN13DanyBotBuzzer8playNoteEhjh+0x106>
 5a2:	4f e0       	ldi	r20, 0x0F	; 15
 5a4:	be 01       	movw	r22, r28
 5a6:	0e 94 45 01 	call	0x28a	; 0x28a <_ZN13DanyBotBuzzer13playFrequencyEjjh>
}
 5aa:	df 91       	pop	r29
 5ac:	cf 91       	pop	r28
 5ae:	08 95       	ret

000005b0 <_ZL8nextNotev>:
		c = currentCharacter();
	}

	return arg;
}
static void nextNote() {
 5b0:	7f 92       	push	r7
 5b2:	8f 92       	push	r8
 5b4:	9f 92       	push	r9
 5b6:	af 92       	push	r10
 5b8:	bf 92       	push	r11
 5ba:	cf 92       	push	r12
 5bc:	df 92       	push	r13
 5be:	ef 92       	push	r14
 5c0:	ff 92       	push	r15
 5c2:	0f 93       	push	r16
 5c4:	1f 93       	push	r17
 5c6:	cf 93       	push	r28
 5c8:	df 93       	push	r29
	uint8_t note = 0;
	uint8_t rest = 0;
	uint8_t tmp_octave = octave;
 5ca:	90 90 08 01 	lds	r9, 0x0108	; 0x800108 <_ZL6octave>
	uint16_t tmp_duration;
	uint16_t dot_add;

	int8_t c;

	if (staccato && staccato_rest_duration) {
 5ce:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <_ZL8staccato>
 5d2:	88 23       	and	r24, r24
 5d4:	61 f0       	breq	.+24     	; 0x5ee <_ZL8nextNotev+0x3e>
 5d6:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <__data_end>
 5da:	66 23       	and	r22, r22
 5dc:	41 f0       	breq	.+16     	; 0x5ee <_ZL8nextNotev+0x3e>
		DanyBotBuzzer::playNote(SILENT_NOTE, staccato_rest_duration, 0);
 5de:	70 e0       	ldi	r23, 0x00	; 0
 5e0:	40 e0       	ldi	r20, 0x00	; 0
 5e2:	8f ef       	ldi	r24, 0xFF	; 255
 5e4:	0e 94 4f 02 	call	0x49e	; 0x49e <_ZN13DanyBotBuzzer8playNoteEhjh>
		staccato_rest_duration = 0;
 5e8:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end>
		return;
 5ec:	27 c1       	rjmp	.+590    	; 0x83c <_ZL8nextNotev+0x28c>
		case 'v':
		volume = getNumber();
		goto parse_character;
		
		case '!':
		octave = 4;
 5ee:	68 94       	set
 5f0:	88 24       	eor	r8, r8
 5f2:	82 f8       	bld	r8, 2
		whole_note_duration = 2000;
 5f4:	0f 2e       	mov	r0, r31
 5f6:	f0 ed       	ldi	r31, 0xD0	; 208
 5f8:	af 2e       	mov	r10, r31
 5fa:	f7 e0       	ldi	r31, 0x07	; 7
 5fc:	bf 2e       	mov	r11, r31
 5fe:	f0 2d       	mov	r31, r0
		note_type = 4;
 600:	68 94       	set
 602:	cc 24       	eor	r12, r12
 604:	c2 f8       	bld	r12, 2
 606:	d1 2c       	mov	r13, r1
		duration = 500;
 608:	0f 2e       	mov	r0, r31
 60a:	f4 ef       	ldi	r31, 0xF4	; 244
 60c:	ef 2e       	mov	r14, r31
 60e:	ff 24       	eor	r15, r15
 610:	f3 94       	inc	r15
 612:	f0 2d       	mov	r31, r0
		volume = 15;
 614:	cf e0       	ldi	r28, 0x0F	; 15
 616:	d0 e0       	ldi	r29, 0x00	; 0
		case 'r':
		rest = 1;
		break;
		
		case 't':
		whole_note_duration = 60 * 400 / getNumber() * 10;
 618:	00 ec       	ldi	r16, 0xC0	; 192
 61a:	1d e5       	ldi	r17, 0x5D	; 93
		
		case 'm':
		if (currentCharacter() == 'l')
			staccato = false;
		else {
			staccato = true;
 61c:	77 24       	eor	r7, r7
 61e:	73 94       	inc	r7
		return;
	}

	parse_character:

	c = currentCharacter();
 620:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZL16currentCharacterv>
 624:	e8 2f       	mov	r30, r24
	buzzerSequence++;
 626:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <buzzerSequence>
 62a:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <buzzerSequence+0x1>
 62e:	01 96       	adiw	r24, 0x01	; 1
 630:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <buzzerSequence+0x1>
 634:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <buzzerSequence>

	switch (c) {
 638:	8e 2f       	mov	r24, r30
 63a:	ee 0f       	add	r30, r30
 63c:	99 0b       	sbc	r25, r25
 63e:	aa 0b       	sbc	r26, r26
 640:	bb 0b       	sbc	r27, r27
 642:	fc 01       	movw	r30, r24
 644:	b1 97       	sbiw	r30, 0x21	; 33
 646:	e6 35       	cpi	r30, 0x56	; 86
 648:	f1 05       	cpc	r31, r1
 64a:	08 f0       	brcs	.+2      	; 0x64e <_ZL8nextNotev+0x9e>
 64c:	86 c0       	rjmp	.+268    	; 0x75a <_ZL8nextNotev+0x1aa>
 64e:	e0 5c       	subi	r30, 0xC0	; 192
 650:	ff 4f       	sbci	r31, 0xFF	; 255
 652:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <__tablejump2__>

	return arg;
}
static void nextNote() {
	uint8_t note = 0;
	uint8_t rest = 0;
 656:	d0 e0       	ldi	r29, 0x00	; 0
		case 'a':
		note = NOTE_A(0);
		break;
		
		case 'b':
		note = NOTE_B(0);
 658:	cb e0       	ldi	r28, 0x0B	; 11
 65a:	89 c0       	rjmp	.+274    	; 0x76e <_ZL8nextNotev+0x1be>
	c = currentCharacter();
	buzzerSequence++;

	switch (c) {
		case '>':
		tmp_octave++;
 65c:	93 94       	inc	r9
		goto parse_character;
 65e:	e0 cf       	rjmp	.-64     	; 0x620 <_ZL8nextNotev+0x70>
		
		case '<':
		tmp_octave--;
 660:	9a 94       	dec	r9
		goto parse_character;
 662:	de cf       	rjmp	.-68     	; 0x620 <_ZL8nextNotev+0x70>

	return arg;
}
static void nextNote() {
	uint8_t note = 0;
	uint8_t rest = 0;
 664:	d0 e0       	ldi	r29, 0x00	; 0
		case 'c':
		note = NOTE_C(0);
		break;
		
		case 'd':
		note = NOTE_D(0);
 666:	c2 e0       	ldi	r28, 0x02	; 2
		break;
 668:	82 c0       	rjmp	.+260    	; 0x76e <_ZL8nextNotev+0x1be>

	return arg;
}
static void nextNote() {
	uint8_t note = 0;
	uint8_t rest = 0;
 66a:	d0 e0       	ldi	r29, 0x00	; 0
		case 'd':
		note = NOTE_D(0);
		break;
		
		case 'e':
		note = NOTE_E(0);
 66c:	c4 e0       	ldi	r28, 0x04	; 4
		break;
 66e:	7f c0       	rjmp	.+254    	; 0x76e <_ZL8nextNotev+0x1be>

	return arg;
}
static void nextNote() {
	uint8_t note = 0;
	uint8_t rest = 0;
 670:	d0 e0       	ldi	r29, 0x00	; 0
		case 'e':
		note = NOTE_E(0);
		break;
		
		case 'f':
		note = NOTE_F(0);
 672:	c5 e0       	ldi	r28, 0x05	; 5
		break;
 674:	7c c0       	rjmp	.+248    	; 0x76e <_ZL8nextNotev+0x1be>

	return arg;
}
static void nextNote() {
	uint8_t note = 0;
	uint8_t rest = 0;
 676:	d0 e0       	ldi	r29, 0x00	; 0
		case 'f':
		note = NOTE_F(0);
		break;
		
		case 'g':
		note = NOTE_G(0);
 678:	c7 e0       	ldi	r28, 0x07	; 7
		break;
 67a:	79 c0       	rjmp	.+242    	; 0x76e <_ZL8nextNotev+0x1be>
		
		case 'l':
		note_type = getNumber();
 67c:	0e 94 05 01 	call	0x20a	; 0x20a <_ZL9getNumberv>
 680:	bc 01       	movw	r22, r24
 682:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <_ZL9note_type+0x1>
 686:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_ZL9note_type>
		duration = whole_note_duration / note_type;
 68a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL19whole_note_duration>
 68e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZL19whole_note_duration+0x1>
 692:	0e 94 99 05 	call	0xb32	; 0xb32 <__udivmodhi4>
 696:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <_ZL8duration+0x1>
 69a:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <_ZL8duration>
		goto parse_character;
 69e:	c0 cf       	rjmp	.-128    	; 0x620 <_ZL8nextNotev+0x70>
		
		case 'm':
		if (currentCharacter() == 'l')
 6a0:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZL16currentCharacterv>
 6a4:	8c 36       	cpi	r24, 0x6C	; 108
 6a6:	19 f4       	brne	.+6      	; 0x6ae <_ZL8nextNotev+0xfe>
			staccato = false;
 6a8:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <_ZL8staccato>
 6ac:	04 c0       	rjmp	.+8      	; 0x6b6 <_ZL8nextNotev+0x106>
		else {
			staccato = true;
 6ae:	70 92 1b 01 	sts	0x011B, r7	; 0x80011b <_ZL8staccato>
			staccato_rest_duration = 0;
 6b2:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end>
		}
		buzzerSequence++;
 6b6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <buzzerSequence>
 6ba:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <buzzerSequence+0x1>
 6be:	01 96       	adiw	r24, 0x01	; 1
 6c0:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <buzzerSequence+0x1>
 6c4:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <buzzerSequence>
		goto parse_character;
 6c8:	ab cf       	rjmp	.-170    	; 0x620 <_ZL8nextNotev+0x70>
		
		case 'o':
		octave = getNumber();
 6ca:	0e 94 05 01 	call	0x20a	; 0x20a <_ZL9getNumberv>
 6ce:	98 2e       	mov	r9, r24
 6d0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZL6octave>
		tmp_octave = octave;
		goto parse_character;
 6d4:	a5 cf       	rjmp	.-182    	; 0x620 <_ZL8nextNotev+0x70>
		
		case 'r':
		rest = 1;
 6d6:	d1 e0       	ldi	r29, 0x01	; 1
	}

	return arg;
}
static void nextNote() {
	uint8_t note = 0;
 6d8:	c0 e0       	ldi	r28, 0x00	; 0
		tmp_octave = octave;
		goto parse_character;
		
		case 'r':
		rest = 1;
		break;
 6da:	49 c0       	rjmp	.+146    	; 0x76e <_ZL8nextNotev+0x1be>
		
		case 't':
		whole_note_duration = 60 * 400 / getNumber() * 10;
 6dc:	0e 94 05 01 	call	0x20a	; 0x20a <_ZL9getNumberv>
 6e0:	bc 01       	movw	r22, r24
 6e2:	c8 01       	movw	r24, r16
 6e4:	0e 94 99 05 	call	0xb32	; 0xb32 <__udivmodhi4>
 6e8:	cb 01       	movw	r24, r22
 6ea:	88 0f       	add	r24, r24
 6ec:	99 1f       	adc	r25, r25
 6ee:	66 0f       	add	r22, r22
 6f0:	77 1f       	adc	r23, r23
 6f2:	66 0f       	add	r22, r22
 6f4:	77 1f       	adc	r23, r23
 6f6:	66 0f       	add	r22, r22
 6f8:	77 1f       	adc	r23, r23
 6fa:	86 0f       	add	r24, r22
 6fc:	97 1f       	adc	r25, r23
 6fe:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZL19whole_note_duration+0x1>
 702:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZL19whole_note_duration>
		duration = whole_note_duration / note_type;
 706:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <_ZL9note_type>
 70a:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <_ZL9note_type+0x1>
 70e:	0e 94 99 05 	call	0xb32	; 0xb32 <__udivmodhi4>
 712:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <_ZL8duration+0x1>
 716:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <_ZL8duration>
		goto parse_character;
 71a:	82 cf       	rjmp	.-252    	; 0x620 <_ZL8nextNotev+0x70>
		
		case 'v':
		volume = getNumber();
 71c:	0e 94 05 01 	call	0x20a	; 0x20a <_ZL9getNumberv>
 720:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 724:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		goto parse_character;
 728:	7b cf       	rjmp	.-266    	; 0x620 <_ZL8nextNotev+0x70>
		
		case '!':
		octave = 4;
 72a:	80 92 08 01 	sts	0x0108, r8	; 0x800108 <_ZL6octave>
		whole_note_duration = 2000;
 72e:	b0 92 07 01 	sts	0x0107, r11	; 0x800107 <_ZL19whole_note_duration+0x1>
 732:	a0 92 06 01 	sts	0x0106, r10	; 0x800106 <_ZL19whole_note_duration>
		note_type = 4;
 736:	d0 92 05 01 	sts	0x0105, r13	; 0x800105 <_ZL9note_type+0x1>
 73a:	c0 92 04 01 	sts	0x0104, r12	; 0x800104 <_ZL9note_type>
		duration = 500;
 73e:	f0 92 03 01 	sts	0x0103, r15	; 0x800103 <_ZL8duration+0x1>
 742:	e0 92 02 01 	sts	0x0102, r14	; 0x800102 <_ZL8duration>
		volume = 15;
 746:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_start+0x1>
 74a:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
		staccato = 0;
 74e:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <_ZL8staccato>
		tmp_octave = octave;
 752:	68 94       	set
 754:	99 24       	eor	r9, r9
 756:	92 f8       	bld	r9, 2
		tmp_duration = duration;
		goto parse_character;
 758:	63 cf       	rjmp	.-314    	; 0x620 <_ZL8nextNotev+0x70>
		
		default:
		buzzerSequence = 0;
 75a:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <buzzerSequence+0x1>
 75e:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <buzzerSequence>
		return;
 762:	6c c0       	rjmp	.+216    	; 0x83c <_ZL8nextNotev+0x28c>

	return arg;
}
static void nextNote() {
	uint8_t note = 0;
	uint8_t rest = 0;
 764:	d0 e0       	ldi	r29, 0x00	; 0
		case '<':
		tmp_octave--;
		goto parse_character;
		
		case 'a':
		note = NOTE_A(0);
 766:	c9 e0       	ldi	r28, 0x09	; 9
 768:	02 c0       	rjmp	.+4      	; 0x76e <_ZL8nextNotev+0x1be>

	return arg;
}
static void nextNote() {
	uint8_t note = 0;
	uint8_t rest = 0;
 76a:	d0 e0       	ldi	r29, 0x00	; 0
		case 'b':
		note = NOTE_B(0);
		break;
		
		case 'c':
		note = NOTE_C(0);
 76c:	c0 e0       	ldi	r28, 0x00	; 0
		default:
		buzzerSequence = 0;
		return;
	}

	note += tmp_octave * 12;
 76e:	99 2d       	mov	r25, r9
 770:	99 0f       	add	r25, r25
 772:	99 0e       	add	r9, r25
 774:	99 0c       	add	r9, r9
 776:	99 0c       	add	r9, r9
 778:	c9 0d       	add	r28, r9

	c = currentCharacter();
 77a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZL16currentCharacterv>
	while (c == '+' || c == '#') {
 77e:	98 2f       	mov	r25, r24
 780:	97 7f       	andi	r25, 0xF7	; 247
 782:	93 32       	cpi	r25, 0x23	; 35
 784:	19 f0       	breq	.+6      	; 0x78c <_ZL8nextNotev+0x1dc>
		buzzerSequence++;
		note++;
		c = currentCharacter();
	}
	while (c == '-') {
 786:	8d 32       	cpi	r24, 0x2D	; 45
 788:	71 f0       	breq	.+28     	; 0x7a6 <_ZL8nextNotev+0x1f6>
 78a:	1b c0       	rjmp	.+54     	; 0x7c2 <_ZL8nextNotev+0x212>

	note += tmp_octave * 12;

	c = currentCharacter();
	while (c == '+' || c == '#') {
		buzzerSequence++;
 78c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <buzzerSequence>
 790:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <buzzerSequence+0x1>
 794:	01 96       	adiw	r24, 0x01	; 1
 796:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <buzzerSequence+0x1>
 79a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <buzzerSequence>
		note++;
 79e:	cf 5f       	subi	r28, 0xFF	; 255
		c = currentCharacter();
 7a0:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZL16currentCharacterv>
	}

	note += tmp_octave * 12;

	c = currentCharacter();
	while (c == '+' || c == '#') {
 7a4:	ec cf       	rjmp	.-40     	; 0x77e <_ZL8nextNotev+0x1ce>
		buzzerSequence++;
		note++;
		c = currentCharacter();
	}
	while (c == '-') {
		buzzerSequence++;
 7a6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <buzzerSequence>
 7aa:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <buzzerSequence+0x1>
 7ae:	01 96       	adiw	r24, 0x01	; 1
 7b0:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <buzzerSequence+0x1>
 7b4:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <buzzerSequence>
		note--;
 7b8:	c1 50       	subi	r28, 0x01	; 1
		c = currentCharacter();
 7ba:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZL16currentCharacterv>
	while (c == '+' || c == '#') {
		buzzerSequence++;
		note++;
		c = currentCharacter();
	}
	while (c == '-') {
 7be:	8d 32       	cpi	r24, 0x2D	; 45
 7c0:	91 f3       	breq	.-28     	; 0x7a6 <_ZL8nextNotev+0x1f6>
		c = currentCharacter();
	}


	tmp_duration = duration;
	if (c > '0' && c < '9')
 7c2:	81 53       	subi	r24, 0x31	; 49
 7c4:	88 30       	cpi	r24, 0x08	; 8
 7c6:	28 f0       	brcs	.+10     	; 0x7d2 <_ZL8nextNotev+0x222>
		note--;
		c = currentCharacter();
	}


	tmp_duration = duration;
 7c8:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <_ZL8duration>
 7cc:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <_ZL8duration+0x1>
 7d0:	0b c0       	rjmp	.+22     	; 0x7e8 <_ZL8nextNotev+0x238>
	if (c > '0' && c < '9')
		tmp_duration = whole_note_duration / getNumber();
 7d2:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <_ZL19whole_note_duration>
 7d6:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <_ZL19whole_note_duration+0x1>
 7da:	0e 94 05 01 	call	0x20a	; 0x20a <_ZL9getNumberv>
 7de:	bc 01       	movw	r22, r24
 7e0:	c8 01       	movw	r24, r16
 7e2:	0e 94 99 05 	call	0xb32	; 0xb32 <__udivmodhi4>
 7e6:	7b 01       	movw	r14, r22

	dot_add = tmp_duration / 2;
 7e8:	87 01       	movw	r16, r14
 7ea:	16 95       	lsr	r17
 7ec:	07 95       	ror	r16
	while (currentCharacter() == '.') {
 7ee:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_ZL16currentCharacterv>
 7f2:	8e 32       	cpi	r24, 0x2E	; 46
 7f4:	71 f4       	brne	.+28     	; 0x812 <_ZL8nextNotev+0x262>
		buzzerSequence++;
 7f6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <buzzerSequence>
 7fa:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <buzzerSequence+0x1>
 7fe:	01 96       	adiw	r24, 0x01	; 1
 800:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <buzzerSequence+0x1>
 804:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <buzzerSequence>
		tmp_duration += dot_add;
 808:	e0 0e       	add	r14, r16
 80a:	f1 1e       	adc	r15, r17
		dot_add /= 2;
 80c:	16 95       	lsr	r17
 80e:	07 95       	ror	r16
	tmp_duration = duration;
	if (c > '0' && c < '9')
		tmp_duration = whole_note_duration / getNumber();

	dot_add = tmp_duration / 2;
	while (currentCharacter() == '.') {
 810:	ee cf       	rjmp	.-36     	; 0x7ee <_ZL8nextNotev+0x23e>
		buzzerSequence++;
		tmp_duration += dot_add;
		dot_add /= 2;
	}

	if (staccato) {
 812:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <_ZL8staccato>
 816:	88 23       	and	r24, r24
 818:	39 f0       	breq	.+14     	; 0x828 <_ZL8nextNotev+0x278>
		staccato_rest_duration = tmp_duration / 2;
 81a:	c7 01       	movw	r24, r14
 81c:	96 95       	lsr	r25
 81e:	87 95       	ror	r24
 820:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
		tmp_duration -= staccato_rest_duration;
 824:	e8 1a       	sub	r14, r24
 826:	f1 08       	sbc	r15, r1
	}

	DanyBotBuzzer::playNote(rest ? SILENT_NOTE : note, tmp_duration, volume);
 828:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_start>
 82c:	d1 11       	cpse	r29, r1
 82e:	02 c0       	rjmp	.+4      	; 0x834 <_ZL8nextNotev+0x284>
 830:	8c 2f       	mov	r24, r28
 832:	01 c0       	rjmp	.+2      	; 0x836 <_ZL8nextNotev+0x286>
 834:	8f ef       	ldi	r24, 0xFF	; 255
 836:	b7 01       	movw	r22, r14
 838:	0e 94 4f 02 	call	0x49e	; 0x49e <_ZN13DanyBotBuzzer8playNoteEhjh>
}
 83c:	df 91       	pop	r29
 83e:	cf 91       	pop	r28
 840:	1f 91       	pop	r17
 842:	0f 91       	pop	r16
 844:	ff 90       	pop	r15
 846:	ef 90       	pop	r14
 848:	df 90       	pop	r13
 84a:	cf 90       	pop	r12
 84c:	bf 90       	pop	r11
 84e:	af 90       	pop	r10
 850:	9f 90       	pop	r9
 852:	8f 90       	pop	r8
 854:	7f 90       	pop	r7
 856:	08 95       	ret

00000858 <__vector_9>:
static uint16_t volume = 15;
static uint8_t staccato = 0;
static uint8_t staccato_rest_duration;
static void nextNote();

ISR(TIMER2_OVF_vect) {
 858:	1f 92       	push	r1
 85a:	0f 92       	push	r0
 85c:	0f b6       	in	r0, 0x3f	; 63
 85e:	0f 92       	push	r0
 860:	11 24       	eor	r1, r1
 862:	2f 93       	push	r18
 864:	3f 93       	push	r19
 866:	4f 93       	push	r20
 868:	5f 93       	push	r21
 86a:	6f 93       	push	r22
 86c:	7f 93       	push	r23
 86e:	8f 93       	push	r24
 870:	9f 93       	push	r25
 872:	af 93       	push	r26
 874:	bf 93       	push	r27
 876:	ef 93       	push	r30
 878:	ff 93       	push	r31
	if (buzzerTimeout-- == 0) {
 87a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <_ZL13buzzerTimeout>
 87e:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <_ZL13buzzerTimeout+0x1>
 882:	9c 01       	movw	r18, r24
 884:	21 50       	subi	r18, 0x01	; 1
 886:	31 09       	sbc	r19, r1
 888:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <_ZL13buzzerTimeout+0x1>
 88c:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <_ZL13buzzerTimeout>
 890:	89 2b       	or	r24, r25
 892:	e9 f4       	brne	.+58     	; 0x8ce <__vector_9+0x76>
		TIMSK2 = 0;
 894:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
		sei();
 898:	78 94       	sei
		TCCR2B = (TCCR2B & 0xF8) | 0x3;
 89a:	e1 eb       	ldi	r30, 0xB1	; 177
 89c:	f0 e0       	ldi	r31, 0x00	; 0
 89e:	80 81       	ld	r24, Z
 8a0:	88 7f       	andi	r24, 0xF8	; 248
 8a2:	83 60       	ori	r24, 0x03	; 3
 8a4:	80 83       	st	Z, r24
		OCR2A = (F_CPU / 64) / 1000;
 8a6:	8a ef       	ldi	r24, 0xFA	; 250
 8a8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
		OCR2B = 0;
 8ac:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
		buzzerFinished = 1;
 8b0:	81 e0       	ldi	r24, 0x01	; 1
 8b2:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <buzzerFinished>
		if (buzzerSequence && (play_mode_setting == PLAY_AUTOMATIC))
 8b6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <buzzerSequence>
 8ba:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <buzzerSequence+0x1>
 8be:	89 2b       	or	r24, r25
 8c0:	31 f0       	breq	.+12     	; 0x8ce <__vector_9+0x76>
 8c2:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZL17play_mode_setting>
 8c6:	81 11       	cpse	r24, r1
 8c8:	02 c0       	rjmp	.+4      	; 0x8ce <__vector_9+0x76>
			nextNote();
 8ca:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <_ZL8nextNotev>
	}
}
 8ce:	ff 91       	pop	r31
 8d0:	ef 91       	pop	r30
 8d2:	bf 91       	pop	r27
 8d4:	af 91       	pop	r26
 8d6:	9f 91       	pop	r25
 8d8:	8f 91       	pop	r24
 8da:	7f 91       	pop	r23
 8dc:	6f 91       	pop	r22
 8de:	5f 91       	pop	r21
 8e0:	4f 91       	pop	r20
 8e2:	3f 91       	pop	r19
 8e4:	2f 91       	pop	r18
 8e6:	0f 90       	pop	r0
 8e8:	0f be       	out	0x3f, r0	; 63
 8ea:	0f 90       	pop	r0
 8ec:	1f 90       	pop	r1
 8ee:	18 95       	reti

000008f0 <_ZN10DanyBotLed5setUpEv>:
void DanyBotLed::on(){
	PORTB |= (1 << PORTB5);
}

void DanyBotLed::off(){
	PORTB &= ~(1 << PORTB5);
 8f0:	25 9a       	sbi	0x04, 5	; 4
 8f2:	08 95       	ret

000008f4 <_ZN10DanyBotLed6toggleEv>:
}

void DanyBotLed::toggle(){
	PORTB ^= (1 << PORTB5);
 8f4:	95 b1       	in	r25, 0x05	; 5
 8f6:	80 e2       	ldi	r24, 0x20	; 32
 8f8:	89 27       	eor	r24, r25
 8fa:	85 b9       	out	0x05, r24	; 5
 8fc:	08 95       	ret

000008fe <_ZN17DanyBotLineSensor9emiterOffEv>:
	PORTD |= (1 << PORTD2);
	_delay_us(100);
}

void DanyBotLineSensor::emiterOff() {
	PORTD &= ~(1 << PORTD2);
 8fe:	5a 98       	cbi	0x0b, 2	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 900:	8f e8       	ldi	r24, 0x8F	; 143
 902:	91 e0       	ldi	r25, 0x01	; 1
 904:	01 97       	sbiw	r24, 0x01	; 1
 906:	f1 f7       	brne	.-4      	; 0x904 <__stack+0x5>
 908:	00 c0       	rjmp	.+0      	; 0x90a <__stack+0xb>
 90a:	00 00       	nop
 90c:	08 95       	ret

0000090e <_ZN17DanyBotLineSensor5resetEv>:
void DanyBotLineSensor::setUp() {
	DanyBotLineSensor::reset();
	DDRD |= (1 << PORTD2);
}

void DanyBotLineSensor::reset() {
 90e:	ee e2       	ldi	r30, 0x2E	; 46
 910:	f1 e0       	ldi	r31, 0x01	; 1
 912:	a2 e2       	ldi	r26, 0x22	; 34
 914:	b1 e0       	ldi	r27, 0x01	; 1
 916:	2a e3       	ldi	r18, 0x3A	; 58
 918:	31 e0       	ldi	r19, 0x01	; 1
	for(uint8_t i = 0; i < NO_SENSOR; i++) {
		calibratedMax[i] = 0;
		calibratedMin[i] = TIMEOUT;
 91a:	80 ed       	ldi	r24, 0xD0	; 208
 91c:	97 e0       	ldi	r25, 0x07	; 7
	DDRD |= (1 << PORTD2);
}

void DanyBotLineSensor::reset() {
	for(uint8_t i = 0; i < NO_SENSOR; i++) {
		calibratedMax[i] = 0;
 91e:	11 92       	st	Z+, r1
 920:	11 92       	st	Z+, r1
		calibratedMin[i] = TIMEOUT;
 922:	8d 93       	st	X+, r24
 924:	9d 93       	st	X+, r25
	DanyBotLineSensor::reset();
	DDRD |= (1 << PORTD2);
}

void DanyBotLineSensor::reset() {
	for(uint8_t i = 0; i < NO_SENSOR; i++) {
 926:	e2 17       	cp	r30, r18
 928:	f3 07       	cpc	r31, r19
 92a:	c9 f7       	brne	.-14     	; 0x91e <_ZN17DanyBotLineSensor5resetEv+0x10>
		calibratedMax[i] = 0;
		calibratedMin[i] = TIMEOUT;
	}
	DanyBotLineSensor::emiterOff();
 92c:	0e 94 7f 04 	call	0x8fe	; 0x8fe <_ZN17DanyBotLineSensor9emiterOffEv>
 930:	08 95       	ret

00000932 <_ZN17DanyBotLineSensor5setUpEv>:
uint16_t calibratedMax[NO_SENSOR];
uint16_t calibratedMin[NO_SENSOR];
bool onLine = false;

void DanyBotLineSensor::setUp() {
	DanyBotLineSensor::reset();
 932:	0e 94 87 04 	call	0x90e	; 0x90e <_ZN17DanyBotLineSensor5resetEv>
	DDRD |= (1 << PORTD2);
 936:	52 9a       	sbi	0x0a, 2	; 10
 938:	08 95       	ret

0000093a <_ZN13DanyBotMotors5setUpEv>:
#include "../Constant.h"
#include "DanyBotMotors.h"

void DanyBotMotors::setUp() {
	DDRD |= (1 << PORTD7);
 93a:	57 9a       	sbi	0x0a, 7	; 10
	DDRB |= (1 << PORTB0);
 93c:	20 9a       	sbi	0x04, 0	; 4
	
	TCCR1A = (1 << COM0A1) | (1 << COM0B1);
 93e:	80 ea       	ldi	r24, 0xA0	; 160
 940:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = (1 << WGM13) | (1 << CS10);
 944:	81 e1       	ldi	r24, 0x11	; 17
 946:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	ICR1 = MAX_MOTOR_SPEED;
 94a:	80 e9       	ldi	r24, 0x90	; 144
 94c:	91 e0       	ldi	r25, 0x01	; 1
 94e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 952:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 956:	08 95       	ret

00000958 <_ZN17DanyBotPushButton5setUpEv>:
#include "../Constant.h"
#include "DanyBotPushButton.h"

void DanyBotPushButton::setUp() {
	DDRB &= ~(1 << PORTB4);
 958:	24 98       	cbi	0x04, 4	; 4
	PORTB |= (1 << PORTB4);
 95a:	2c 9a       	sbi	0x05, 4	; 5
 95c:	08 95       	ret

0000095e <_ZN13DanyBotSerial5setUpEv>:
	tempTail = (UART_RxTail + 1) & SERIAL_RX_BUFFER_MASK;
	UART_RxTail = tempTail;
	
	serialData = UART_RxBuf[tempTail];
	return (UART_LastRxError << 8) + serialData;
}
 95e:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <_ZL11UART_TxHead>
 962:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <_ZL11UART_TxTail>
 966:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <_ZL11UART_RxHead>
 96a:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <_ZL11UART_RxTail>
 96e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 972:	83 e0       	ldi	r24, 0x03	; 3
 974:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 978:	88 e9       	ldi	r24, 0x98	; 152
 97a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 97e:	86 e0       	ldi	r24, 0x06	; 6
 980:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 984:	08 95       	ret

00000986 <_ZN13DanyBotSerial9writeByteEh>:
 986:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <_ZL11UART_TxHead>
 98a:	2f 5f       	subi	r18, 0xFF	; 255
 98c:	2f 71       	andi	r18, 0x1F	; 31
 98e:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <_ZL11UART_TxTail>
 992:	29 17       	cp	r18, r25
 994:	e1 f3       	breq	.-8      	; 0x98e <_ZN13DanyBotSerial9writeByteEh+0x8>
 996:	e2 2f       	mov	r30, r18
 998:	f0 e0       	ldi	r31, 0x00	; 0
 99a:	e1 5a       	subi	r30, 0xA1	; 161
 99c:	fe 4f       	sbci	r31, 0xFE	; 254
 99e:	80 83       	st	Z, r24
 9a0:	20 93 3e 01 	sts	0x013E, r18	; 0x80013e <_ZL11UART_TxHead>
 9a4:	e1 ec       	ldi	r30, 0xC1	; 193
 9a6:	f0 e0       	ldi	r31, 0x00	; 0
 9a8:	80 81       	ld	r24, Z
 9aa:	80 62       	ori	r24, 0x20	; 32
 9ac:	80 83       	st	Z, r24
 9ae:	08 95       	ret

000009b0 <__vector_18>:

ISR(USART_RX_vect) {
 9b0:	1f 92       	push	r1
 9b2:	0f 92       	push	r0
 9b4:	0f b6       	in	r0, 0x3f	; 63
 9b6:	0f 92       	push	r0
 9b8:	11 24       	eor	r1, r1
 9ba:	2f 93       	push	r18
 9bc:	8f 93       	push	r24
 9be:	9f 93       	push	r25
 9c0:	ef 93       	push	r30
 9c2:	ff 93       	push	r31
	uint8_t temphead;
	uint8_t serialData;
	uint8_t serialStatus;
	uint8_t lastRxError;
	
	serialStatus = UCSR0A;
 9c4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	serialData = UDR0;
 9c8:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	
	lastRxError = (serialStatus & ((1 << FE0) | (1 << DOR0)));
 9cc:	88 71       	andi	r24, 0x18	; 24
	temphead = (UART_RxHead + 1) & SERIAL_RX_BUFFER_MASK;
 9ce:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <_ZL11UART_RxHead>
 9d2:	ef 5f       	subi	r30, 0xFF	; 255
 9d4:	ef 71       	andi	r30, 0x1F	; 31
	
	if(temphead == UART_RxTail) {
 9d6:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <_ZL11UART_RxTail>
 9da:	e9 17       	cp	r30, r25
 9dc:	39 f0       	breq	.+14     	; 0x9ec <__vector_18+0x3c>
		lastRxError = SERIAL_BUFFER_OVERFLOW >> 8;
	} else {
		UART_RxHead = temphead;
 9de:	e0 93 3c 01 	sts	0x013C, r30	; 0x80013c <_ZL11UART_RxHead>
		UART_RxBuf[temphead] = serialData;
 9e2:	f0 e0       	ldi	r31, 0x00	; 0
 9e4:	e1 5c       	subi	r30, 0xC1	; 193
 9e6:	fe 4f       	sbci	r31, 0xFE	; 254
 9e8:	20 83       	st	Z, r18
 9ea:	01 c0       	rjmp	.+2      	; 0x9ee <__vector_18+0x3e>
	
	lastRxError = (serialStatus & ((1 << FE0) | (1 << DOR0)));
	temphead = (UART_RxHead + 1) & SERIAL_RX_BUFFER_MASK;
	
	if(temphead == UART_RxTail) {
		lastRxError = SERIAL_BUFFER_OVERFLOW >> 8;
 9ec:	82 e0       	ldi	r24, 0x02	; 2
	} else {
		UART_RxHead = temphead;
		UART_RxBuf[temphead] = serialData;
	}
	UART_LastRxError = lastRxError;
 9ee:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <_ZL16UART_LastRxError>
}
 9f2:	ff 91       	pop	r31
 9f4:	ef 91       	pop	r30
 9f6:	9f 91       	pop	r25
 9f8:	8f 91       	pop	r24
 9fa:	2f 91       	pop	r18
 9fc:	0f 90       	pop	r0
 9fe:	0f be       	out	0x3f, r0	; 63
 a00:	0f 90       	pop	r0
 a02:	1f 90       	pop	r1
 a04:	18 95       	reti

00000a06 <__vector_19>:

ISR(USART_UDRE_vect) {
 a06:	1f 92       	push	r1
 a08:	0f 92       	push	r0
 a0a:	0f b6       	in	r0, 0x3f	; 63
 a0c:	0f 92       	push	r0
 a0e:	11 24       	eor	r1, r1
 a10:	8f 93       	push	r24
 a12:	9f 93       	push	r25
 a14:	ef 93       	push	r30
 a16:	ff 93       	push	r31
	uint8_t tempTail;
	
	if(UART_TxHead != UART_TxTail) {
 a18:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <_ZL11UART_TxHead>
 a1c:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <_ZL11UART_TxTail>
 a20:	98 17       	cp	r25, r24
 a22:	69 f0       	breq	.+26     	; 0xa3e <__vector_19+0x38>
		tempTail = (UART_TxTail + 1) & SERIAL_TX_BUFFER_MASK;
 a24:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <_ZL11UART_TxTail>
 a28:	ef 5f       	subi	r30, 0xFF	; 255
 a2a:	ef 71       	andi	r30, 0x1F	; 31
		UART_TxTail = tempTail;
 a2c:	e0 93 3d 01 	sts	0x013D, r30	; 0x80013d <_ZL11UART_TxTail>
		UDR0 = UART_TxBuf[tempTail];
 a30:	f0 e0       	ldi	r31, 0x00	; 0
 a32:	e1 5a       	subi	r30, 0xA1	; 161
 a34:	fe 4f       	sbci	r31, 0xFE	; 254
 a36:	80 81       	ld	r24, Z
 a38:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 a3c:	05 c0       	rjmp	.+10     	; 0xa48 <__vector_19+0x42>
	} else {
		UCSR0B &= ~(1 << UDRIE0);
 a3e:	e1 ec       	ldi	r30, 0xC1	; 193
 a40:	f0 e0       	ldi	r31, 0x00	; 0
 a42:	80 81       	ld	r24, Z
 a44:	8f 7d       	andi	r24, 0xDF	; 223
 a46:	80 83       	st	Z, r24
	}
 a48:	ff 91       	pop	r31
 a4a:	ef 91       	pop	r30
 a4c:	9f 91       	pop	r25
 a4e:	8f 91       	pop	r24
 a50:	0f 90       	pop	r0
 a52:	0f be       	out	0x3f, r0	; 63
 a54:	0f 90       	pop	r0
 a56:	1f 90       	pop	r1
 a58:	18 95       	reti

00000a5a <_ZN12DanyBotTimer5setUpEv>:
	timer0_fract = 0;
	TIMSK0 |= (1 << TOIE0);
}

void DanyBotTimer::stop() {
	TIMSK0 &= ~(1 << TOIE0);
 a5a:	78 94       	sei
 a5c:	84 b5       	in	r24, 0x24	; 36
 a5e:	83 60       	ori	r24, 0x03	; 3
 a60:	84 bd       	out	0x24, r24	; 36
 a62:	85 b5       	in	r24, 0x25	; 37
 a64:	83 60       	ori	r24, 0x03	; 3
 a66:	85 bd       	out	0x25, r24	; 37
 a68:	ea e7       	ldi	r30, 0x7A	; 122
 a6a:	f0 e0       	ldi	r31, 0x00	; 0
 a6c:	80 81       	ld	r24, Z
 a6e:	87 60       	ori	r24, 0x07	; 7
 a70:	80 83       	st	Z, r24
 a72:	80 81       	ld	r24, Z
 a74:	80 68       	ori	r24, 0x80	; 128
 a76:	80 83       	st	Z, r24
 a78:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 a7c:	08 95       	ret

00000a7e <__vector_16>:
}

ISR(TIMER0_OVF_vect){
 a7e:	1f 92       	push	r1
 a80:	0f 92       	push	r0
 a82:	0f b6       	in	r0, 0x3f	; 63
 a84:	0f 92       	push	r0
 a86:	11 24       	eor	r1, r1
 a88:	2f 93       	push	r18
 a8a:	3f 93       	push	r19
 a8c:	8f 93       	push	r24
 a8e:	9f 93       	push	r25
 a90:	af 93       	push	r26
 a92:	bf 93       	push	r27
	uint32_t m = timer0_millis;
 a94:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <timer0_millis>
 a98:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <timer0_millis+0x1>
 a9c:	a0 91 82 01 	lds	r26, 0x0182	; 0x800182 <timer0_millis+0x2>
 aa0:	b0 91 83 01 	lds	r27, 0x0183	; 0x800183 <timer0_millis+0x3>
	uint8_t f = timer0_fract;
 aa4:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <_ZL12timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
 aa8:	23 e0       	ldi	r18, 0x03	; 3
 aaa:	23 0f       	add	r18, r19
	if(f >= FRACT_MAX) {
 aac:	2d 37       	cpi	r18, 0x7D	; 125
 aae:	20 f4       	brcc	.+8      	; 0xab8 <__vector_16+0x3a>

ISR(TIMER0_OVF_vect){
	uint32_t m = timer0_millis;
	uint8_t f = timer0_fract;

	m += MILLIS_INC;
 ab0:	01 96       	adiw	r24, 0x01	; 1
 ab2:	a1 1d       	adc	r26, r1
 ab4:	b1 1d       	adc	r27, r1
 ab6:	05 c0       	rjmp	.+10     	; 0xac2 <__vector_16+0x44>
	f += FRACT_INC;
	if(f >= FRACT_MAX) {
		f -= FRACT_MAX;
 ab8:	26 e8       	ldi	r18, 0x86	; 134
 aba:	23 0f       	add	r18, r19
		m += 1;
 abc:	02 96       	adiw	r24, 0x02	; 2
 abe:	a1 1d       	adc	r26, r1
 ac0:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 ac2:	20 93 7f 01 	sts	0x017F, r18	; 0x80017f <_ZL12timer0_fract>
	timer0_millis = m;
 ac6:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <timer0_millis>
 aca:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <timer0_millis+0x1>
 ace:	a0 93 82 01 	sts	0x0182, r26	; 0x800182 <timer0_millis+0x2>
 ad2:	b0 93 83 01 	sts	0x0183, r27	; 0x800183 <timer0_millis+0x3>
	timer0_overflow_count++;
 ad6:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <timer0_overflow_count>
 ada:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <timer0_overflow_count+0x1>
 ade:	a0 91 86 01 	lds	r26, 0x0186	; 0x800186 <timer0_overflow_count+0x2>
 ae2:	b0 91 87 01 	lds	r27, 0x0187	; 0x800187 <timer0_overflow_count+0x3>
 ae6:	01 96       	adiw	r24, 0x01	; 1
 ae8:	a1 1d       	adc	r26, r1
 aea:	b1 1d       	adc	r27, r1
 aec:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <timer0_overflow_count>
 af0:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <timer0_overflow_count+0x1>
 af4:	a0 93 86 01 	sts	0x0186, r26	; 0x800186 <timer0_overflow_count+0x2>
 af8:	b0 93 87 01 	sts	0x0187, r27	; 0x800187 <timer0_overflow_count+0x3>
 afc:	bf 91       	pop	r27
 afe:	af 91       	pop	r26
 b00:	9f 91       	pop	r25
 b02:	8f 91       	pop	r24
 b04:	3f 91       	pop	r19
 b06:	2f 91       	pop	r18
 b08:	0f 90       	pop	r0
 b0a:	0f be       	out	0x3f, r0	; 63
 b0c:	0f 90       	pop	r0
 b0e:	1f 90       	pop	r1
 b10:	18 95       	reti

00000b12 <__mulsi3>:
 b12:	db 01       	movw	r26, r22
 b14:	8f 93       	push	r24
 b16:	9f 93       	push	r25
 b18:	0e 94 03 06 	call	0xc06	; 0xc06 <__muluhisi3>
 b1c:	bf 91       	pop	r27
 b1e:	af 91       	pop	r26
 b20:	a2 9f       	mul	r26, r18
 b22:	80 0d       	add	r24, r0
 b24:	91 1d       	adc	r25, r1
 b26:	a3 9f       	mul	r26, r19
 b28:	90 0d       	add	r25, r0
 b2a:	b2 9f       	mul	r27, r18
 b2c:	90 0d       	add	r25, r0
 b2e:	11 24       	eor	r1, r1
 b30:	08 95       	ret

00000b32 <__udivmodhi4>:
 b32:	aa 1b       	sub	r26, r26
 b34:	bb 1b       	sub	r27, r27
 b36:	51 e1       	ldi	r21, 0x11	; 17
 b38:	07 c0       	rjmp	.+14     	; 0xb48 <__udivmodhi4_ep>

00000b3a <__udivmodhi4_loop>:
 b3a:	aa 1f       	adc	r26, r26
 b3c:	bb 1f       	adc	r27, r27
 b3e:	a6 17       	cp	r26, r22
 b40:	b7 07       	cpc	r27, r23
 b42:	10 f0       	brcs	.+4      	; 0xb48 <__udivmodhi4_ep>
 b44:	a6 1b       	sub	r26, r22
 b46:	b7 0b       	sbc	r27, r23

00000b48 <__udivmodhi4_ep>:
 b48:	88 1f       	adc	r24, r24
 b4a:	99 1f       	adc	r25, r25
 b4c:	5a 95       	dec	r21
 b4e:	a9 f7       	brne	.-22     	; 0xb3a <__udivmodhi4_loop>
 b50:	80 95       	com	r24
 b52:	90 95       	com	r25
 b54:	bc 01       	movw	r22, r24
 b56:	cd 01       	movw	r24, r26
 b58:	08 95       	ret

00000b5a <__udivmodsi4>:
 b5a:	a1 e2       	ldi	r26, 0x21	; 33
 b5c:	1a 2e       	mov	r1, r26
 b5e:	aa 1b       	sub	r26, r26
 b60:	bb 1b       	sub	r27, r27
 b62:	fd 01       	movw	r30, r26
 b64:	0d c0       	rjmp	.+26     	; 0xb80 <__udivmodsi4_ep>

00000b66 <__udivmodsi4_loop>:
 b66:	aa 1f       	adc	r26, r26
 b68:	bb 1f       	adc	r27, r27
 b6a:	ee 1f       	adc	r30, r30
 b6c:	ff 1f       	adc	r31, r31
 b6e:	a2 17       	cp	r26, r18
 b70:	b3 07       	cpc	r27, r19
 b72:	e4 07       	cpc	r30, r20
 b74:	f5 07       	cpc	r31, r21
 b76:	20 f0       	brcs	.+8      	; 0xb80 <__udivmodsi4_ep>
 b78:	a2 1b       	sub	r26, r18
 b7a:	b3 0b       	sbc	r27, r19
 b7c:	e4 0b       	sbc	r30, r20
 b7e:	f5 0b       	sbc	r31, r21

00000b80 <__udivmodsi4_ep>:
 b80:	66 1f       	adc	r22, r22
 b82:	77 1f       	adc	r23, r23
 b84:	88 1f       	adc	r24, r24
 b86:	99 1f       	adc	r25, r25
 b88:	1a 94       	dec	r1
 b8a:	69 f7       	brne	.-38     	; 0xb66 <__udivmodsi4_loop>
 b8c:	60 95       	com	r22
 b8e:	70 95       	com	r23
 b90:	80 95       	com	r24
 b92:	90 95       	com	r25
 b94:	9b 01       	movw	r18, r22
 b96:	ac 01       	movw	r20, r24
 b98:	bd 01       	movw	r22, r26
 b9a:	cf 01       	movw	r24, r30
 b9c:	08 95       	ret

00000b9e <__divmodsi4>:
 b9e:	05 2e       	mov	r0, r21
 ba0:	97 fb       	bst	r25, 7
 ba2:	1e f4       	brtc	.+6      	; 0xbaa <__divmodsi4+0xc>
 ba4:	00 94       	com	r0
 ba6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__negsi2>
 baa:	57 fd       	sbrc	r21, 7
 bac:	07 d0       	rcall	.+14     	; 0xbbc <__divmodsi4_neg2>
 bae:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__udivmodsi4>
 bb2:	07 fc       	sbrc	r0, 7
 bb4:	03 d0       	rcall	.+6      	; 0xbbc <__divmodsi4_neg2>
 bb6:	4e f4       	brtc	.+18     	; 0xbca <__divmodsi4_exit>
 bb8:	0c 94 e6 05 	jmp	0xbcc	; 0xbcc <__negsi2>

00000bbc <__divmodsi4_neg2>:
 bbc:	50 95       	com	r21
 bbe:	40 95       	com	r20
 bc0:	30 95       	com	r19
 bc2:	21 95       	neg	r18
 bc4:	3f 4f       	sbci	r19, 0xFF	; 255
 bc6:	4f 4f       	sbci	r20, 0xFF	; 255
 bc8:	5f 4f       	sbci	r21, 0xFF	; 255

00000bca <__divmodsi4_exit>:
 bca:	08 95       	ret

00000bcc <__negsi2>:
 bcc:	90 95       	com	r25
 bce:	80 95       	com	r24
 bd0:	70 95       	com	r23
 bd2:	61 95       	neg	r22
 bd4:	7f 4f       	sbci	r23, 0xFF	; 255
 bd6:	8f 4f       	sbci	r24, 0xFF	; 255
 bd8:	9f 4f       	sbci	r25, 0xFF	; 255
 bda:	08 95       	ret

00000bdc <__tablejump2__>:
 bdc:	ee 0f       	add	r30, r30
 bde:	ff 1f       	adc	r31, r31
 be0:	05 90       	lpm	r0, Z+
 be2:	f4 91       	lpm	r31, Z
 be4:	e0 2d       	mov	r30, r0
 be6:	09 94       	ijmp

00000be8 <__umulhisi3>:
 be8:	a2 9f       	mul	r26, r18
 bea:	b0 01       	movw	r22, r0
 bec:	b3 9f       	mul	r27, r19
 bee:	c0 01       	movw	r24, r0
 bf0:	a3 9f       	mul	r26, r19
 bf2:	70 0d       	add	r23, r0
 bf4:	81 1d       	adc	r24, r1
 bf6:	11 24       	eor	r1, r1
 bf8:	91 1d       	adc	r25, r1
 bfa:	b2 9f       	mul	r27, r18
 bfc:	70 0d       	add	r23, r0
 bfe:	81 1d       	adc	r24, r1
 c00:	11 24       	eor	r1, r1
 c02:	91 1d       	adc	r25, r1
 c04:	08 95       	ret

00000c06 <__muluhisi3>:
 c06:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <__umulhisi3>
 c0a:	a5 9f       	mul	r26, r21
 c0c:	90 0d       	add	r25, r0
 c0e:	b4 9f       	mul	r27, r20
 c10:	90 0d       	add	r25, r0
 c12:	a4 9f       	mul	r26, r20
 c14:	80 0d       	add	r24, r0
 c16:	91 1d       	adc	r25, r1
 c18:	11 24       	eor	r1, r1
 c1a:	08 95       	ret

00000c1c <_exit>:
 c1c:	f8 94       	cli

00000c1e <__stop_program>:
 c1e:	ff cf       	rjmp	.-2      	; 0xc1e <__stop_program>
